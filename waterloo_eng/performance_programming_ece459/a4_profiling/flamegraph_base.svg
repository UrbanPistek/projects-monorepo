<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="1110" onload="init(evt)" viewBox="0 0 1200 1110" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="1110" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="1093.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="1093.00"> </text><svg id="frames" x="10" width="1180" total_samples="481"><g><title>[unknown] (81 samples, 16.84%)</title><rect x="0.0000%" y="1029" width="16.8399%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="81"/><text x="0.2500%" y="1039.50">[unknown]</text></g><g><title>[unknown] (81 samples, 16.84%)</title><rect x="0.0000%" y="1013" width="16.8399%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="81"/><text x="0.2500%" y="1023.50">[unknown]</text></g><g><title>[unknown] (70 samples, 14.55%)</title><rect x="2.2869%" y="997" width="14.5530%" height="15" fill="rgb(221,193,54)" fg:x="11" fg:w="70"/><text x="2.5369%" y="1007.50">[unknown]</text></g><g><title>[unknown] (35 samples, 7.28%)</title><rect x="9.5634%" y="981" width="7.2765%" height="15" fill="rgb(248,212,6)" fg:x="46" fg:w="35"/><text x="9.8134%" y="991.50">[unknown]</text></g><g><title>[unknown] (10 samples, 2.08%)</title><rect x="14.7609%" y="965" width="2.0790%" height="15" fill="rgb(208,68,35)" fg:x="71" fg:w="10"/><text x="15.0109%" y="975.50">[..</text></g><g><title>[unknown] (9 samples, 1.87%)</title><rect x="14.9688%" y="949" width="1.8711%" height="15" fill="rgb(232,128,0)" fg:x="72" fg:w="9"/><text x="15.2188%" y="959.50">[..</text></g><g><title>[unknown] (9 samples, 1.87%)</title><rect x="14.9688%" y="933" width="1.8711%" height="15" fill="rgb(207,160,47)" fg:x="72" fg:w="9"/><text x="15.2188%" y="943.50">[..</text></g><g><title>[unknown] (9 samples, 1.87%)</title><rect x="14.9688%" y="917" width="1.8711%" height="15" fill="rgb(228,23,34)" fg:x="72" fg:w="9"/><text x="15.2188%" y="927.50">[..</text></g><g><title>[unknown] (3 samples, 0.62%)</title><rect x="16.2162%" y="901" width="0.6237%" height="15" fill="rgb(218,30,26)" fg:x="78" fg:w="3"/><text x="16.4662%" y="911.50"></text></g><g><title>[unknown] (3 samples, 0.62%)</title><rect x="16.2162%" y="885" width="0.6237%" height="15" fill="rgb(220,122,19)" fg:x="78" fg:w="3"/><text x="16.4662%" y="895.50"></text></g><g><title>[unknown] (3 samples, 0.62%)</title><rect x="16.2162%" y="869" width="0.6237%" height="15" fill="rgb(250,228,42)" fg:x="78" fg:w="3"/><text x="16.4662%" y="879.50"></text></g><g><title>[unknown] (3 samples, 0.62%)</title><rect x="16.2162%" y="853" width="0.6237%" height="15" fill="rgb(240,193,28)" fg:x="78" fg:w="3"/><text x="16.4662%" y="863.50"></text></g><g><title>[unknown] (3 samples, 0.62%)</title><rect x="16.2162%" y="837" width="0.6237%" height="15" fill="rgb(216,20,37)" fg:x="78" fg:w="3"/><text x="16.4662%" y="847.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="16.6320%" y="821" width="0.2079%" height="15" fill="rgb(206,188,39)" fg:x="80" fg:w="1"/><text x="16.8820%" y="831.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="16.6320%" y="805" width="0.2079%" height="15" fill="rgb(217,207,13)" fg:x="80" fg:w="1"/><text x="16.8820%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="16.6320%" y="789" width="0.2079%" height="15" fill="rgb(231,73,38)" fg:x="80" fg:w="1"/><text x="16.8820%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="16.8399%" y="997" width="0.2079%" height="15" fill="rgb(225,20,46)" fg:x="81" fg:w="1"/><text x="17.0899%" y="1007.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.25%)</title><rect x="17.0478%" y="757" width="1.2474%" height="15" fill="rgb(210,31,41)" fg:x="82" fg:w="6"/><text x="17.2978%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::string::String,alloc::string::String)]&gt; (6 samples, 1.25%)</title><rect x="17.0478%" y="741" width="1.2474%" height="15" fill="rgb(221,200,47)" fg:x="82" fg:w="6"/><text x="17.2978%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::string::String)&gt; (6 samples, 1.25%)</title><rect x="17.0478%" y="725" width="1.2474%" height="15" fill="rgb(226,26,5)" fg:x="82" fg:w="6"/><text x="17.2978%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (6 samples, 1.25%)</title><rect x="17.0478%" y="709" width="1.2474%" height="15" fill="rgb(249,33,26)" fg:x="82" fg:w="6"/><text x="17.2978%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (6 samples, 1.25%)</title><rect x="17.0478%" y="693" width="1.2474%" height="15" fill="rgb(235,183,28)" fg:x="82" fg:w="6"/><text x="17.2978%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (6 samples, 1.25%)</title><rect x="17.0478%" y="677" width="1.2474%" height="15" fill="rgb(221,5,38)" fg:x="82" fg:w="6"/><text x="17.2978%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (6 samples, 1.25%)</title><rect x="17.0478%" y="661" width="1.2474%" height="15" fill="rgb(247,18,42)" fg:x="82" fg:w="6"/><text x="17.2978%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (6 samples, 1.25%)</title><rect x="17.0478%" y="645" width="1.2474%" height="15" fill="rgb(241,131,45)" fg:x="82" fg:w="6"/><text x="17.2978%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (6 samples, 1.25%)</title><rect x="17.0478%" y="629" width="1.2474%" height="15" fill="rgb(249,31,29)" fg:x="82" fg:w="6"/><text x="17.2978%" y="639.50"></text></g><g><title>__GI___libc_free (6 samples, 1.25%)</title><rect x="17.0478%" y="613" width="1.2474%" height="15" fill="rgb(225,111,53)" fg:x="82" fg:w="6"/><text x="17.2978%" y="623.50"></text></g><g><title>_int_free (5 samples, 1.04%)</title><rect x="17.2557%" y="597" width="1.0395%" height="15" fill="rgb(238,160,17)" fg:x="83" fg:w="5"/><text x="17.5057%" y="607.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String)&gt;&gt; (8 samples, 1.66%)</title><rect x="17.0478%" y="773" width="1.6632%" height="15" fill="rgb(214,148,48)" fg:x="82" fg:w="8"/><text x="17.2978%" y="783.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;(alloc::string::String,alloc::string::String)&gt;&gt; (2 samples, 0.42%)</title><rect x="18.2952%" y="757" width="0.4158%" height="15" fill="rgb(232,36,49)" fg:x="88" fg:w="2"/><text x="18.5452%" y="767.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.42%)</title><rect x="18.2952%" y="741" width="0.4158%" height="15" fill="rgb(209,103,24)" fg:x="88" fg:w="2"/><text x="18.5452%" y="751.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.42%)</title><rect x="18.2952%" y="725" width="0.4158%" height="15" fill="rgb(229,88,8)" fg:x="88" fg:w="2"/><text x="18.5452%" y="735.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.42%)</title><rect x="18.2952%" y="709" width="0.4158%" height="15" fill="rgb(213,181,19)" fg:x="88" fg:w="2"/><text x="18.5452%" y="719.50"></text></g><g><title>__GI___libc_free (2 samples, 0.42%)</title><rect x="18.2952%" y="693" width="0.4158%" height="15" fill="rgb(254,191,54)" fg:x="88" fg:w="2"/><text x="18.5452%" y="703.50"></text></g><g><title>_int_free (2 samples, 0.42%)</title><rect x="18.2952%" y="677" width="0.4158%" height="15" fill="rgb(241,83,37)" fg:x="88" fg:w="2"/><text x="18.5452%" y="687.50"></text></g><g><title>malloc_consolidate (2 samples, 0.42%)</title><rect x="18.2952%" y="661" width="0.4158%" height="15" fill="rgb(233,36,39)" fg:x="88" fg:w="2"/><text x="18.5452%" y="671.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="18.9189%" y="581" width="0.2079%" height="15" fill="rgb(226,3,54)" fg:x="91" fg:w="1"/><text x="19.1689%" y="591.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="18.9189%" y="565" width="0.2079%" height="15" fill="rgb(245,192,40)" fg:x="91" fg:w="1"/><text x="19.1689%" y="575.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="18.9189%" y="549" width="0.2079%" height="15" fill="rgb(238,167,29)" fg:x="91" fg:w="1"/><text x="19.1689%" y="559.50"></text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (1 samples, 0.21%)</title><rect x="18.9189%" y="533" width="0.2079%" height="15" fill="rgb(232,182,51)" fg:x="91" fg:w="1"/><text x="19.1689%" y="543.50"></text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (1 samples, 0.21%)</title><rect x="18.9189%" y="517" width="0.2079%" height="15" fill="rgb(231,60,39)" fg:x="91" fg:w="1"/><text x="19.1689%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (1 samples, 0.21%)</title><rect x="18.9189%" y="501" width="0.2079%" height="15" fill="rgb(208,69,12)" fg:x="91" fg:w="1"/><text x="19.1689%" y="511.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.21%)</title><rect x="18.9189%" y="485" width="0.2079%" height="15" fill="rgb(235,93,37)" fg:x="91" fg:w="1"/><text x="19.1689%" y="495.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.21%)</title><rect x="18.9189%" y="469" width="0.2079%" height="15" fill="rgb(213,116,39)" fg:x="91" fg:w="1"/><text x="19.1689%" y="479.50"></text></g><g><title>[libc.so.6] (1 samples, 0.21%)</title><rect x="18.9189%" y="453" width="0.2079%" height="15" fill="rgb(222,207,29)" fg:x="91" fg:w="1"/><text x="19.1689%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="437" width="0.2079%" height="15" fill="rgb(206,96,30)" fg:x="91" fg:w="1"/><text x="19.1689%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="421" width="0.2079%" height="15" fill="rgb(218,138,4)" fg:x="91" fg:w="1"/><text x="19.1689%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="405" width="0.2079%" height="15" fill="rgb(250,191,14)" fg:x="91" fg:w="1"/><text x="19.1689%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="389" width="0.2079%" height="15" fill="rgb(239,60,40)" fg:x="91" fg:w="1"/><text x="19.1689%" y="399.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="373" width="0.2079%" height="15" fill="rgb(206,27,48)" fg:x="91" fg:w="1"/><text x="19.1689%" y="383.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="357" width="0.2079%" height="15" fill="rgb(225,35,8)" fg:x="91" fg:w="1"/><text x="19.1689%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="341" width="0.2079%" height="15" fill="rgb(250,213,24)" fg:x="91" fg:w="1"/><text x="19.1689%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="325" width="0.2079%" height="15" fill="rgb(247,123,22)" fg:x="91" fg:w="1"/><text x="19.1689%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="309" width="0.2079%" height="15" fill="rgb(231,138,38)" fg:x="91" fg:w="1"/><text x="19.1689%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="293" width="0.2079%" height="15" fill="rgb(231,145,46)" fg:x="91" fg:w="1"/><text x="19.1689%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="277" width="0.2079%" height="15" fill="rgb(251,118,11)" fg:x="91" fg:w="1"/><text x="19.1689%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="261" width="0.2079%" height="15" fill="rgb(217,147,25)" fg:x="91" fg:w="1"/><text x="19.1689%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="245" width="0.2079%" height="15" fill="rgb(247,81,37)" fg:x="91" fg:w="1"/><text x="19.1689%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="229" width="0.2079%" height="15" fill="rgb(209,12,38)" fg:x="91" fg:w="1"/><text x="19.1689%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="213" width="0.2079%" height="15" fill="rgb(227,1,9)" fg:x="91" fg:w="1"/><text x="19.1689%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="197" width="0.2079%" height="15" fill="rgb(248,47,43)" fg:x="91" fg:w="1"/><text x="19.1689%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="181" width="0.2079%" height="15" fill="rgb(221,10,30)" fg:x="91" fg:w="1"/><text x="19.1689%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="165" width="0.2079%" height="15" fill="rgb(210,229,1)" fg:x="91" fg:w="1"/><text x="19.1689%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="149" width="0.2079%" height="15" fill="rgb(222,148,37)" fg:x="91" fg:w="1"/><text x="19.1689%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="133" width="0.2079%" height="15" fill="rgb(234,67,33)" fg:x="91" fg:w="1"/><text x="19.1689%" y="143.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="117" width="0.2079%" height="15" fill="rgb(247,98,35)" fg:x="91" fg:w="1"/><text x="19.1689%" y="127.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="101" width="0.2079%" height="15" fill="rgb(247,138,52)" fg:x="91" fg:w="1"/><text x="19.1689%" y="111.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="85" width="0.2079%" height="15" fill="rgb(213,79,30)" fg:x="91" fg:w="1"/><text x="19.1689%" y="95.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="69" width="0.2079%" height="15" fill="rgb(246,177,23)" fg:x="91" fg:w="1"/><text x="19.1689%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="53" width="0.2079%" height="15" fill="rgb(230,62,27)" fg:x="91" fg:w="1"/><text x="19.1689%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="18.9189%" y="37" width="0.2079%" height="15" fill="rgb(216,154,8)" fg:x="91" fg:w="1"/><text x="19.1689%" y="47.50"></text></g><g><title>alloc_perturb (2 samples, 0.42%)</title><rect x="19.7505%" y="309" width="0.4158%" height="15" fill="rgb(244,35,45)" fg:x="95" fg:w="2"/><text x="20.0005%" y="319.50"></text></g><g><title>__GI___libc_malloc (5 samples, 1.04%)</title><rect x="19.3347%" y="341" width="1.0395%" height="15" fill="rgb(251,115,12)" fg:x="93" fg:w="5"/><text x="19.5847%" y="351.50"></text></g><g><title>_int_malloc (3 samples, 0.62%)</title><rect x="19.7505%" y="325" width="0.6237%" height="15" fill="rgb(240,54,50)" fg:x="95" fg:w="3"/><text x="20.0005%" y="335.50"></text></g><g><title>tcache_put (1 samples, 0.21%)</title><rect x="20.1663%" y="309" width="0.2079%" height="15" fill="rgb(233,84,52)" fg:x="97" fg:w="1"/><text x="20.4163%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.21%)</title><rect x="20.3742%" y="341" width="0.2079%" height="15" fill="rgb(207,117,47)" fg:x="98" fg:w="1"/><text x="20.6242%" y="351.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.21%)</title><rect x="20.3742%" y="325" width="0.2079%" height="15" fill="rgb(249,43,39)" fg:x="98" fg:w="1"/><text x="20.6242%" y="335.50"></text></g><g><title>&lt;core::iter::adapters::flatten::FlatMap&lt;I,U,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 1.87%)</title><rect x="18.9189%" y="661" width="1.8711%" height="15" fill="rgb(209,38,44)" fg:x="91" fg:w="9"/><text x="19.1689%" y="671.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::flatten::FlattenCompat&lt;I,U&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 1.87%)</title><rect x="18.9189%" y="645" width="1.8711%" height="15" fill="rgb(236,212,23)" fg:x="91" fg:w="9"/><text x="19.1689%" y="655.50">&lt;..</text></g><g><title>core::iter::adapters::flatten::and_then_or_clear (9 samples, 1.87%)</title><rect x="18.9189%" y="629" width="1.8711%" height="15" fill="rgb(242,79,21)" fg:x="91" fg:w="9"/><text x="19.1689%" y="639.50">c..</text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 1.87%)</title><rect x="18.9189%" y="613" width="1.8711%" height="15" fill="rgb(211,96,35)" fg:x="91" fg:w="9"/><text x="19.1689%" y="623.50">c..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 1.87%)</title><rect x="18.9189%" y="597" width="1.8711%" height="15" fill="rgb(253,215,40)" fg:x="91" fg:w="9"/><text x="19.1689%" y="607.50">&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (8 samples, 1.66%)</title><rect x="19.1268%" y="581" width="1.6632%" height="15" fill="rgb(211,81,21)" fg:x="92" fg:w="8"/><text x="19.3768%" y="591.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (8 samples, 1.66%)</title><rect x="19.1268%" y="565" width="1.6632%" height="15" fill="rgb(208,190,38)" fg:x="92" fg:w="8"/><text x="19.3768%" y="575.50"></text></g><g><title>lab4::idea::IdeaGenerator::cross_product::{{closure}}::{{closure}} (8 samples, 1.66%)</title><rect x="19.1268%" y="549" width="1.6632%" height="15" fill="rgb(235,213,38)" fg:x="92" fg:w="8"/><text x="19.3768%" y="559.50"></text></g><g><title>alloc::str::&lt;impl alloc::borrow::ToOwned for str&gt;::to_owned (8 samples, 1.66%)</title><rect x="19.1268%" y="533" width="1.6632%" height="15" fill="rgb(237,122,38)" fg:x="92" fg:w="8"/><text x="19.3768%" y="543.50"></text></g><g><title>alloc::slice::&lt;impl alloc::borrow::ToOwned for [T]&gt;::to_owned (8 samples, 1.66%)</title><rect x="19.1268%" y="517" width="1.6632%" height="15" fill="rgb(244,218,35)" fg:x="92" fg:w="8"/><text x="19.3768%" y="527.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec (8 samples, 1.66%)</title><rect x="19.1268%" y="501" width="1.6632%" height="15" fill="rgb(240,68,47)" fg:x="92" fg:w="8"/><text x="19.3768%" y="511.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 1.66%)</title><rect x="19.1268%" y="485" width="1.6632%" height="15" fill="rgb(210,16,53)" fg:x="92" fg:w="8"/><text x="19.3768%" y="495.50"></text></g><g><title>alloc::slice::hack::to_vec (8 samples, 1.66%)</title><rect x="19.1268%" y="469" width="1.6632%" height="15" fill="rgb(235,124,12)" fg:x="92" fg:w="8"/><text x="19.3768%" y="479.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 1.66%)</title><rect x="19.1268%" y="453" width="1.6632%" height="15" fill="rgb(224,169,11)" fg:x="92" fg:w="8"/><text x="19.3768%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (8 samples, 1.66%)</title><rect x="19.1268%" y="437" width="1.6632%" height="15" fill="rgb(250,166,2)" fg:x="92" fg:w="8"/><text x="19.3768%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (8 samples, 1.66%)</title><rect x="19.1268%" y="421" width="1.6632%" height="15" fill="rgb(242,216,29)" fg:x="92" fg:w="8"/><text x="19.3768%" y="431.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (8 samples, 1.66%)</title><rect x="19.1268%" y="405" width="1.6632%" height="15" fill="rgb(230,116,27)" fg:x="92" fg:w="8"/><text x="19.3768%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (7 samples, 1.46%)</title><rect x="19.3347%" y="389" width="1.4553%" height="15" fill="rgb(228,99,48)" fg:x="93" fg:w="7"/><text x="19.5847%" y="399.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (7 samples, 1.46%)</title><rect x="19.3347%" y="373" width="1.4553%" height="15" fill="rgb(253,11,6)" fg:x="93" fg:w="7"/><text x="19.5847%" y="383.50"></text></g><g><title>alloc::alloc::alloc (7 samples, 1.46%)</title><rect x="19.3347%" y="357" width="1.4553%" height="15" fill="rgb(247,143,39)" fg:x="93" fg:w="7"/><text x="19.5847%" y="367.50"></text></g><g><title>__rust_alloc (1 samples, 0.21%)</title><rect x="20.5821%" y="341" width="0.2079%" height="15" fill="rgb(236,97,10)" fg:x="99" fg:w="1"/><text x="20.8321%" y="351.50"></text></g><g><title>lab4::idea::IdeaGenerator::run (19 samples, 3.95%)</title><rect x="17.0478%" y="805" width="3.9501%" height="15" fill="rgb(233,208,19)" fg:x="82" fg:w="19"/><text x="17.2978%" y="815.50">lab4..</text></g><g><title>lab4::idea::IdeaGenerator::get_next_idea_name (19 samples, 3.95%)</title><rect x="17.0478%" y="789" width="3.9501%" height="15" fill="rgb(216,164,2)" fg:x="82" fg:w="19"/><text x="17.2978%" y="799.50">lab4..</text></g><g><title>lab4::idea::IdeaGenerator::cross_product (11 samples, 2.29%)</title><rect x="18.7110%" y="773" width="2.2869%" height="15" fill="rgb(220,129,5)" fg:x="90" fg:w="11"/><text x="18.9610%" y="783.50">l..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (11 samples, 2.29%)</title><rect x="18.7110%" y="757" width="2.2869%" height="15" fill="rgb(242,17,10)" fg:x="90" fg:w="11"/><text x="18.9610%" y="767.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (11 samples, 2.29%)</title><rect x="18.7110%" y="741" width="2.2869%" height="15" fill="rgb(242,107,0)" fg:x="90" fg:w="11"/><text x="18.9610%" y="751.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (11 samples, 2.29%)</title><rect x="18.7110%" y="725" width="2.2869%" height="15" fill="rgb(251,28,31)" fg:x="90" fg:w="11"/><text x="18.9610%" y="735.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (11 samples, 2.29%)</title><rect x="18.7110%" y="709" width="2.2869%" height="15" fill="rgb(233,223,10)" fg:x="90" fg:w="11"/><text x="18.9610%" y="719.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (11 samples, 2.29%)</title><rect x="18.7110%" y="693" width="2.2869%" height="15" fill="rgb(215,21,27)" fg:x="90" fg:w="11"/><text x="18.9610%" y="703.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (11 samples, 2.29%)</title><rect x="18.7110%" y="677" width="2.2869%" height="15" fill="rgb(232,23,21)" fg:x="90" fg:w="11"/><text x="18.9610%" y="687.50">a..</text></g><g><title>core::ptr::write (1 samples, 0.21%)</title><rect x="20.7900%" y="661" width="0.2079%" height="15" fill="rgb(244,5,23)" fg:x="100" fg:w="1"/><text x="21.0400%" y="671.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialEq&lt;&amp;B&gt; for &amp;A&gt;::eq (18 samples, 3.74%)</title><rect x="26.1954%" y="661" width="3.7422%" height="15" fill="rgb(226,81,46)" fg:x="126" fg:w="18"/><text x="26.4454%" y="671.50">core..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (18 samples, 3.74%)</title><rect x="26.1954%" y="645" width="3.7422%" height="15" fill="rgb(247,70,30)" fg:x="126" fg:w="18"/><text x="26.4454%" y="655.50">core..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (18 samples, 3.74%)</title><rect x="26.1954%" y="629" width="3.7422%" height="15" fill="rgb(212,68,19)" fg:x="126" fg:w="18"/><text x="26.4454%" y="639.50">&lt;[A]..</text></g><g><title>[libc.so.6] (7 samples, 1.46%)</title><rect x="28.4823%" y="613" width="1.4553%" height="15" fill="rgb(240,187,13)" fg:x="137" fg:w="7"/><text x="28.7323%" y="623.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get (2 samples, 0.42%)</title><rect x="29.9376%" y="661" width="0.4158%" height="15" fill="rgb(223,113,26)" fg:x="144" fg:w="2"/><text x="30.1876%" y="671.50"></text></g><g><title>&lt;core::ops::range::Range&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get (2 samples, 0.42%)</title><rect x="29.9376%" y="645" width="0.4158%" height="15" fill="rgb(206,192,2)" fg:x="144" fg:w="2"/><text x="30.1876%" y="655.50"></text></g><g><title>core::slice::index::&lt;impl core::ops::index::Index&lt;I&gt; for [T]&gt;::index (1 samples, 0.21%)</title><rect x="35.7588%" y="629" width="0.2079%" height="15" fill="rgb(241,108,4)" fg:x="172" fg:w="1"/><text x="36.0088%" y="639.50"></text></g><g><title>&lt;core::ops::range::RangeFrom&lt;usize&gt; as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::index (1 samples, 0.21%)</title><rect x="35.7588%" y="613" width="0.2079%" height="15" fill="rgb(247,173,49)" fg:x="172" fg:w="1"/><text x="36.0088%" y="623.50"></text></g><g><title>core::slice::memchr::contains_zero_byte (3 samples, 0.62%)</title><rect x="35.9667%" y="629" width="0.6237%" height="15" fill="rgb(224,114,35)" fg:x="173" fg:w="3"/><text x="36.2167%" y="639.50"></text></g><g><title>core::num::&lt;impl usize&gt;::wrapping_sub (1 samples, 0.21%)</title><rect x="36.3825%" y="613" width="0.2079%" height="15" fill="rgb(245,159,27)" fg:x="175" fg:w="1"/><text x="36.6325%" y="623.50"></text></g><g><title>core::slice::memchr::memchr_naive (23 samples, 4.78%)</title><rect x="36.5904%" y="629" width="4.7817%" height="15" fill="rgb(245,172,44)" fg:x="176" fg:w="23"/><text x="36.8404%" y="639.50">core::..</text></g><g><title>core::slice::memchr::memchr_aligned (54 samples, 11.23%)</title><rect x="30.3534%" y="645" width="11.2266%" height="15" fill="rgb(236,23,11)" fg:x="146" fg:w="54"/><text x="30.6034%" y="655.50">core::slice::memc..</text></g><g><title>core::slice::memchr::repeat_byte (1 samples, 0.21%)</title><rect x="41.3721%" y="629" width="0.2079%" height="15" fill="rgb(205,117,38)" fg:x="199" fg:w="1"/><text x="41.6221%" y="639.50"></text></g><g><title>&lt;core::str::iter::SplitTerminator&lt;P&gt; as core::iter::traits::iterator::Iterator&gt;::next (96 samples, 19.96%)</title><rect x="21.8295%" y="709" width="19.9584%" height="15" fill="rgb(237,72,25)" fg:x="105" fg:w="96"/><text x="22.0795%" y="719.50">&lt;core::str::iter::SplitTerminat..</text></g><g><title>core::str::iter::SplitInternal&lt;P&gt;::next (96 samples, 19.96%)</title><rect x="21.8295%" y="693" width="19.9584%" height="15" fill="rgb(244,70,9)" fg:x="105" fg:w="96"/><text x="22.0795%" y="703.50">core::str::iter::SplitInternal&lt;..</text></g><g><title>&lt;core::str::pattern::CharSearcher as core::str::pattern::Searcher&gt;::next_match (90 samples, 18.71%)</title><rect x="23.0769%" y="677" width="18.7110%" height="15" fill="rgb(217,125,39)" fg:x="111" fg:w="90"/><text x="23.3269%" y="687.50">&lt;core::str::pattern::CharSear..</text></g><g><title>core::slice::memchr::memchr (55 samples, 11.43%)</title><rect x="30.3534%" y="661" width="11.4345%" height="15" fill="rgb(235,36,10)" fg:x="146" fg:w="55"/><text x="30.6034%" y="671.50">core::slice::memc..</text></g><g><title>core::slice::memchr::memchr_naive (1 samples, 0.21%)</title><rect x="41.5800%" y="645" width="0.2079%" height="15" fill="rgb(251,123,47)" fg:x="200" fg:w="1"/><text x="41.8300%" y="655.50"></text></g><g><title>&lt;core::str::iter::Lines as core::iter::traits::iterator::Iterator&gt;::next (102 samples, 21.21%)</title><rect x="20.9979%" y="741" width="21.2058%" height="15" fill="rgb(221,13,13)" fg:x="101" fg:w="102"/><text x="21.2479%" y="751.50">&lt;core::str::iter::Lines as core::..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::next (98 samples, 20.37%)</title><rect x="21.8295%" y="725" width="20.3742%" height="15" fill="rgb(238,131,9)" fg:x="105" fg:w="98"/><text x="22.0795%" y="735.50">&lt;core::iter::adapters::map::Map&lt;..</text></g><g><title>core::option::Option&lt;T&gt;::map (2 samples, 0.42%)</title><rect x="41.7879%" y="709" width="0.4158%" height="15" fill="rgb(211,50,8)" fg:x="201" fg:w="2"/><text x="42.0379%" y="719.50"></text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;mut F&gt;::call_once (2 samples, 0.42%)</title><rect x="41.7879%" y="693" width="0.4158%" height="15" fill="rgb(245,182,24)" fg:x="201" fg:w="2"/><text x="42.0379%" y="703.50"></text></g><g><title>&lt;core::str::LinesAnyMap as core::ops::function::FnMut&lt;(&amp;str,)&gt;&gt;::call_mut (2 samples, 0.42%)</title><rect x="41.7879%" y="677" width="0.4158%" height="15" fill="rgb(242,14,37)" fg:x="201" fg:w="2"/><text x="42.0379%" y="687.50"></text></g><g><title>&lt;core::str::LinesAnyMap as core::ops::function::Fn&lt;(&amp;str,)&gt;&gt;::call (2 samples, 0.42%)</title><rect x="41.7879%" y="661" width="0.4158%" height="15" fill="rgb(246,228,12)" fg:x="201" fg:w="2"/><text x="42.0379%" y="671.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (2 samples, 0.42%)</title><rect x="42.2037%" y="741" width="0.4158%" height="15" fill="rgb(213,55,15)" fg:x="203" fg:w="2"/><text x="42.4537%" y="751.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (2 samples, 0.42%)</title><rect x="42.2037%" y="725" width="0.4158%" height="15" fill="rgb(209,9,3)" fg:x="203" fg:w="2"/><text x="42.4537%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::nth (105 samples, 21.83%)</title><rect x="20.9979%" y="789" width="21.8295%" height="15" fill="rgb(230,59,30)" fg:x="101" fg:w="105"/><text x="21.2479%" y="799.50">core::iter::traits::iterator::Iter..</text></g><g><title>&lt;core::iter::adapters::cycle::Cycle&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::advance_by (105 samples, 21.83%)</title><rect x="20.9979%" y="773" width="21.8295%" height="15" fill="rgb(209,121,21)" fg:x="101" fg:w="105"/><text x="21.2479%" y="783.50">&lt;core::iter::adapters::cycle::Cycl..</text></g><g><title>core::iter::traits::iterator::Iterator::advance_by (105 samples, 21.83%)</title><rect x="20.9979%" y="757" width="21.8295%" height="15" fill="rgb(220,109,13)" fg:x="101" fg:w="105"/><text x="21.2479%" y="767.50">core::iter::traits::iterator::Iter..</text></g><g><title>core::option::Option&lt;T&gt;::ok_or (1 samples, 0.21%)</title><rect x="42.6195%" y="741" width="0.2079%" height="15" fill="rgb(232,18,1)" fg:x="205" fg:w="1"/><text x="42.8695%" y="751.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (5 samples, 1.04%)</title><rect x="42.8274%" y="789" width="1.0395%" height="15" fill="rgb(215,41,42)" fg:x="206" fg:w="5"/><text x="43.0774%" y="799.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (5 samples, 1.04%)</title><rect x="42.8274%" y="773" width="1.0395%" height="15" fill="rgb(224,123,36)" fg:x="206" fg:w="5"/><text x="43.0774%" y="783.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (5 samples, 1.04%)</title><rect x="42.8274%" y="757" width="1.0395%" height="15" fill="rgb(240,125,3)" fg:x="206" fg:w="5"/><text x="43.0774%" y="767.50"></text></g><g><title>crossbeam_utils::backoff::Backoff::spin (4 samples, 0.83%)</title><rect x="43.0353%" y="741" width="0.8316%" height="15" fill="rgb(205,98,50)" fg:x="207" fg:w="4"/><text x="43.2853%" y="751.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (4 samples, 0.83%)</title><rect x="43.0353%" y="725" width="0.8316%" height="15" fill="rgb(205,185,37)" fg:x="207" fg:w="4"/><text x="43.2853%" y="735.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (4 samples, 0.83%)</title><rect x="43.0353%" y="709" width="0.8316%" height="15" fill="rgb(238,207,15)" fg:x="207" fg:w="4"/><text x="43.2853%" y="719.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (4 samples, 0.83%)</title><rect x="43.0353%" y="693" width="0.8316%" height="15" fill="rgb(213,199,42)" fg:x="207" fg:w="4"/><text x="43.2853%" y="703.50"></text></g><g><title>lab4::checksum::Checksum::update (2 samples, 0.42%)</title><rect x="43.8669%" y="789" width="0.4158%" height="15" fill="rgb(235,201,11)" fg:x="211" fg:w="2"/><text x="44.1169%" y="799.50"></text></g><g><title>hex::decode (2 samples, 0.42%)</title><rect x="43.8669%" y="773" width="0.4158%" height="15" fill="rgb(207,46,11)" fg:x="211" fg:w="2"/><text x="44.1169%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (2 samples, 0.42%)</title><rect x="43.8669%" y="757" width="0.4158%" height="15" fill="rgb(241,35,35)" fg:x="211" fg:w="2"/><text x="44.1169%" y="767.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.42%)</title><rect x="43.8669%" y="741" width="0.4158%" height="15" fill="rgb(243,32,47)" fg:x="211" fg:w="2"/><text x="44.1169%" y="751.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (2 samples, 0.42%)</title><rect x="43.8669%" y="725" width="0.4158%" height="15" fill="rgb(247,202,23)" fg:x="211" fg:w="2"/><text x="44.1169%" y="735.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.42%)</title><rect x="43.8669%" y="709" width="0.4158%" height="15" fill="rgb(219,102,11)" fg:x="211" fg:w="2"/><text x="44.1169%" y="719.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (2 samples, 0.42%)</title><rect x="43.8669%" y="693" width="0.4158%" height="15" fill="rgb(243,110,44)" fg:x="211" fg:w="2"/><text x="44.1169%" y="703.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.42%)</title><rect x="43.8669%" y="677" width="0.4158%" height="15" fill="rgb(222,74,54)" fg:x="211" fg:w="2"/><text x="44.1169%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.42%)</title><rect x="43.8669%" y="661" width="0.4158%" height="15" fill="rgb(216,99,12)" fg:x="211" fg:w="2"/><text x="44.1169%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.42%)</title><rect x="43.8669%" y="645" width="0.4158%" height="15" fill="rgb(226,22,26)" fg:x="211" fg:w="2"/><text x="44.1169%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="44.0748%" y="629" width="0.2079%" height="15" fill="rgb(217,163,10)" fg:x="212" fg:w="1"/><text x="44.3248%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.21%)</title><rect x="44.0748%" y="613" width="0.2079%" height="15" fill="rgb(213,25,53)" fg:x="212" fg:w="1"/><text x="44.3248%" y="623.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.21%)</title><rect x="44.0748%" y="597" width="0.2079%" height="15" fill="rgb(252,105,26)" fg:x="212" fg:w="1"/><text x="44.3248%" y="607.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="44.0748%" y="581" width="0.2079%" height="15" fill="rgb(220,39,43)" fg:x="212" fg:w="1"/><text x="44.3248%" y="591.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (1 samples, 0.21%)</title><rect x="44.0748%" y="565" width="0.2079%" height="15" fill="rgb(229,68,48)" fg:x="212" fg:w="1"/><text x="44.3248%" y="575.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="44.0748%" y="549" width="0.2079%" height="15" fill="rgb(252,8,32)" fg:x="212" fg:w="1"/><text x="44.3248%" y="559.50"></text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="44.0748%" y="533" width="0.2079%" height="15" fill="rgb(223,20,43)" fg:x="212" fg:w="1"/><text x="44.3248%" y="543.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (1 samples, 0.21%)</title><rect x="44.0748%" y="517" width="0.2079%" height="15" fill="rgb(229,81,49)" fg:x="212" fg:w="1"/><text x="44.3248%" y="527.50"></text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (1 samples, 0.21%)</title><rect x="44.0748%" y="501" width="0.2079%" height="15" fill="rgb(236,28,36)" fg:x="212" fg:w="1"/><text x="44.3248%" y="511.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (1 samples, 0.21%)</title><rect x="44.0748%" y="485" width="0.2079%" height="15" fill="rgb(249,185,26)" fg:x="212" fg:w="1"/><text x="44.3248%" y="495.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (1 samples, 0.21%)</title><rect x="44.0748%" y="469" width="0.2079%" height="15" fill="rgb(249,174,33)" fg:x="212" fg:w="1"/><text x="44.3248%" y="479.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (1 samples, 0.21%)</title><rect x="44.0748%" y="453" width="0.2079%" height="15" fill="rgb(233,201,37)" fg:x="212" fg:w="1"/><text x="44.3248%" y="463.50"></text></g><g><title>hex::val (1 samples, 0.21%)</title><rect x="44.0748%" y="437" width="0.2079%" height="15" fill="rgb(221,78,26)" fg:x="212" fg:w="1"/><text x="44.3248%" y="447.50"></text></g><g><title>std::fs::buffer_capacity_required (2 samples, 0.42%)</title><rect x="44.2827%" y="741" width="0.4158%" height="15" fill="rgb(250,127,30)" fg:x="213" fg:w="2"/><text x="44.5327%" y="751.50"></text></g><g><title>std::io::Seek::stream_position (2 samples, 0.42%)</title><rect x="44.2827%" y="725" width="0.4158%" height="15" fill="rgb(230,49,44)" fg:x="213" fg:w="2"/><text x="44.5327%" y="735.50"></text></g><g><title>&lt;&amp;std::fs::File as std::io::Seek&gt;::seek (2 samples, 0.42%)</title><rect x="44.2827%" y="709" width="0.4158%" height="15" fill="rgb(229,67,23)" fg:x="213" fg:w="2"/><text x="44.5327%" y="719.50"></text></g><g><title>std::sys::unix::fs::File::seek (2 samples, 0.42%)</title><rect x="44.2827%" y="693" width="0.4158%" height="15" fill="rgb(249,83,47)" fg:x="213" fg:w="2"/><text x="44.5327%" y="703.50"></text></g><g><title>__lseek64 (2 samples, 0.42%)</title><rect x="44.2827%" y="677" width="0.4158%" height="15" fill="rgb(215,43,3)" fg:x="213" fg:w="2"/><text x="44.5327%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="44.2827%" y="661" width="0.4158%" height="15" fill="rgb(238,154,13)" fg:x="213" fg:w="2"/><text x="44.5327%" y="671.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="44.4906%" y="645" width="0.2079%" height="15" fill="rgb(219,56,2)" fg:x="214" fg:w="1"/><text x="44.7406%" y="655.50"></text></g><g><title>core::str::converts::from_utf8 (3 samples, 0.62%)</title><rect x="44.6985%" y="709" width="0.6237%" height="15" fill="rgb(233,0,4)" fg:x="215" fg:w="3"/><text x="44.9485%" y="719.50"></text></g><g><title>core::str::validations::run_utf8_validation (2 samples, 0.42%)</title><rect x="44.9064%" y="693" width="0.4158%" height="15" fill="rgb(235,30,7)" fg:x="216" fg:w="2"/><text x="45.1564%" y="703.50"></text></g><g><title>std::io::default_read_to_end (1 samples, 0.21%)</title><rect x="45.3222%" y="709" width="0.2079%" height="15" fill="rgb(250,79,13)" fg:x="218" fg:w="1"/><text x="45.5722%" y="719.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.21%)</title><rect x="45.3222%" y="693" width="0.2079%" height="15" fill="rgb(211,146,34)" fg:x="218" fg:w="1"/><text x="45.5722%" y="703.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.21%)</title><rect x="45.3222%" y="677" width="0.2079%" height="15" fill="rgb(228,22,38)" fg:x="218" fg:w="1"/><text x="45.5722%" y="687.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.21%)</title><rect x="45.3222%" y="661" width="0.2079%" height="15" fill="rgb(235,168,5)" fg:x="218" fg:w="1"/><text x="45.5722%" y="671.50"></text></g><g><title>__GI___libc_read (1 samples, 0.21%)</title><rect x="45.3222%" y="645" width="0.2079%" height="15" fill="rgb(221,155,16)" fg:x="218" fg:w="1"/><text x="45.5722%" y="655.50"></text></g><g><title>__GI___libc_read (1 samples, 0.21%)</title><rect x="45.3222%" y="629" width="0.2079%" height="15" fill="rgb(215,215,53)" fg:x="218" fg:w="1"/><text x="45.5722%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="45.3222%" y="613" width="0.2079%" height="15" fill="rgb(223,4,10)" fg:x="218" fg:w="1"/><text x="45.5722%" y="623.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read (1 samples, 0.21%)</title><rect x="45.5301%" y="677" width="0.2079%" height="15" fill="rgb(234,103,6)" fg:x="219" fg:w="1"/><text x="45.7801%" y="687.50"></text></g><g><title>std::sys::unix::fs::File::read (1 samples, 0.21%)</title><rect x="45.5301%" y="661" width="0.2079%" height="15" fill="rgb(227,97,0)" fg:x="219" fg:w="1"/><text x="45.7801%" y="671.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read (1 samples, 0.21%)</title><rect x="45.5301%" y="645" width="0.2079%" height="15" fill="rgb(234,150,53)" fg:x="219" fg:w="1"/><text x="45.7801%" y="655.50"></text></g><g><title>__GI___libc_read (1 samples, 0.21%)</title><rect x="45.5301%" y="629" width="0.2079%" height="15" fill="rgb(228,201,54)" fg:x="219" fg:w="1"/><text x="45.7801%" y="639.50"></text></g><g><title>__GI___libc_read (1 samples, 0.21%)</title><rect x="45.5301%" y="613" width="0.2079%" height="15" fill="rgb(222,22,37)" fg:x="219" fg:w="1"/><text x="45.7801%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="45.5301%" y="597" width="0.2079%" height="15" fill="rgb(237,53,32)" fg:x="219" fg:w="1"/><text x="45.7801%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="45.5301%" y="581" width="0.2079%" height="15" fill="rgb(233,25,53)" fg:x="219" fg:w="1"/><text x="45.7801%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="45.5301%" y="565" width="0.2079%" height="15" fill="rgb(210,40,34)" fg:x="219" fg:w="1"/><text x="45.7801%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="45.5301%" y="549" width="0.2079%" height="15" fill="rgb(241,220,44)" fg:x="219" fg:w="1"/><text x="45.7801%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="45.5301%" y="533" width="0.2079%" height="15" fill="rgb(235,28,35)" fg:x="219" fg:w="1"/><text x="45.7801%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="45.5301%" y="517" width="0.2079%" height="15" fill="rgb(210,56,17)" fg:x="219" fg:w="1"/><text x="45.7801%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="45.5301%" y="501" width="0.2079%" height="15" fill="rgb(224,130,29)" fg:x="219" fg:w="1"/><text x="45.7801%" y="511.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_to_string (18 samples, 3.74%)</title><rect x="44.2827%" y="757" width="3.7422%" height="15" fill="rgb(235,212,8)" fg:x="213" fg:w="18"/><text x="44.5327%" y="767.50">&lt;std..</text></g><g><title>std::io::default_read_to_string (16 samples, 3.33%)</title><rect x="44.6985%" y="741" width="3.3264%" height="15" fill="rgb(223,33,50)" fg:x="215" fg:w="16"/><text x="44.9485%" y="751.50">std..</text></g><g><title>std::io::append_to_string (16 samples, 3.33%)</title><rect x="44.6985%" y="725" width="3.3264%" height="15" fill="rgb(219,149,13)" fg:x="215" fg:w="16"/><text x="44.9485%" y="735.50">std..</text></g><g><title>std::io::default_read_to_string::{{closure}} (12 samples, 2.49%)</title><rect x="45.5301%" y="709" width="2.4948%" height="15" fill="rgb(250,156,29)" fg:x="219" fg:w="12"/><text x="45.7801%" y="719.50">st..</text></g><g><title>std::io::default_read_to_end (12 samples, 2.49%)</title><rect x="45.5301%" y="693" width="2.4948%" height="15" fill="rgb(216,193,19)" fg:x="219" fg:w="12"/><text x="45.7801%" y="703.50">st..</text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (11 samples, 2.29%)</title><rect x="45.7380%" y="677" width="2.2869%" height="15" fill="rgb(216,135,14)" fg:x="220" fg:w="11"/><text x="45.9880%" y="687.50">&lt;..</text></g><g><title>std::sys::unix::fs::File::read_buf (11 samples, 2.29%)</title><rect x="45.7380%" y="661" width="2.2869%" height="15" fill="rgb(241,47,5)" fg:x="220" fg:w="11"/><text x="45.9880%" y="671.50">s..</text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (11 samples, 2.29%)</title><rect x="45.7380%" y="645" width="2.2869%" height="15" fill="rgb(233,42,35)" fg:x="220" fg:w="11"/><text x="45.9880%" y="655.50">s..</text></g><g><title>__GI___libc_read (11 samples, 2.29%)</title><rect x="45.7380%" y="629" width="2.2869%" height="15" fill="rgb(231,13,6)" fg:x="220" fg:w="11"/><text x="45.9880%" y="639.50">_..</text></g><g><title>__GI___libc_read (11 samples, 2.29%)</title><rect x="45.7380%" y="613" width="2.2869%" height="15" fill="rgb(207,181,40)" fg:x="220" fg:w="11"/><text x="45.9880%" y="623.50">_..</text></g><g><title>[unknown] (11 samples, 2.29%)</title><rect x="45.7380%" y="597" width="2.2869%" height="15" fill="rgb(254,173,49)" fg:x="220" fg:w="11"/><text x="45.9880%" y="607.50">[..</text></g><g><title>[unknown] (11 samples, 2.29%)</title><rect x="45.7380%" y="581" width="2.2869%" height="15" fill="rgb(221,1,38)" fg:x="220" fg:w="11"/><text x="45.9880%" y="591.50">[..</text></g><g><title>[unknown] (11 samples, 2.29%)</title><rect x="45.7380%" y="565" width="2.2869%" height="15" fill="rgb(206,124,46)" fg:x="220" fg:w="11"/><text x="45.9880%" y="575.50">[..</text></g><g><title>[unknown] (11 samples, 2.29%)</title><rect x="45.7380%" y="549" width="2.2869%" height="15" fill="rgb(249,21,11)" fg:x="220" fg:w="11"/><text x="45.9880%" y="559.50">[..</text></g><g><title>[unknown] (10 samples, 2.08%)</title><rect x="45.9459%" y="533" width="2.0790%" height="15" fill="rgb(222,201,40)" fg:x="221" fg:w="10"/><text x="46.1959%" y="543.50">[..</text></g><g><title>[unknown] (10 samples, 2.08%)</title><rect x="45.9459%" y="517" width="2.0790%" height="15" fill="rgb(235,61,29)" fg:x="221" fg:w="10"/><text x="46.1959%" y="527.50">[..</text></g><g><title>[unknown] (10 samples, 2.08%)</title><rect x="45.9459%" y="501" width="2.0790%" height="15" fill="rgb(219,207,3)" fg:x="221" fg:w="10"/><text x="46.1959%" y="511.50">[..</text></g><g><title>[unknown] (10 samples, 2.08%)</title><rect x="45.9459%" y="485" width="2.0790%" height="15" fill="rgb(222,56,46)" fg:x="221" fg:w="10"/><text x="46.1959%" y="495.50">[..</text></g><g><title>[unknown] (10 samples, 2.08%)</title><rect x="45.9459%" y="469" width="2.0790%" height="15" fill="rgb(239,76,54)" fg:x="221" fg:w="10"/><text x="46.1959%" y="479.50">[..</text></g><g><title>[unknown] (10 samples, 2.08%)</title><rect x="45.9459%" y="453" width="2.0790%" height="15" fill="rgb(231,124,27)" fg:x="221" fg:w="10"/><text x="46.1959%" y="463.50">[..</text></g><g><title>[unknown] (7 samples, 1.46%)</title><rect x="46.5696%" y="437" width="1.4553%" height="15" fill="rgb(249,195,6)" fg:x="224" fg:w="7"/><text x="46.8196%" y="447.50"></text></g><g><title>[unknown] (7 samples, 1.46%)</title><rect x="46.5696%" y="421" width="1.4553%" height="15" fill="rgb(237,174,47)" fg:x="224" fg:w="7"/><text x="46.8196%" y="431.50"></text></g><g><title>[unknown] (7 samples, 1.46%)</title><rect x="46.5696%" y="405" width="1.4553%" height="15" fill="rgb(206,201,31)" fg:x="224" fg:w="7"/><text x="46.8196%" y="415.50"></text></g><g><title>[unknown] (7 samples, 1.46%)</title><rect x="46.5696%" y="389" width="1.4553%" height="15" fill="rgb(231,57,52)" fg:x="224" fg:w="7"/><text x="46.8196%" y="399.50"></text></g><g><title>[unknown] (7 samples, 1.46%)</title><rect x="46.5696%" y="373" width="1.4553%" height="15" fill="rgb(248,177,22)" fg:x="224" fg:w="7"/><text x="46.8196%" y="383.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="46.7775%" y="357" width="1.2474%" height="15" fill="rgb(215,211,37)" fg:x="225" fg:w="6"/><text x="47.0275%" y="367.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="46.7775%" y="341" width="1.2474%" height="15" fill="rgb(241,128,51)" fg:x="225" fg:w="6"/><text x="47.0275%" y="351.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="46.7775%" y="325" width="1.2474%" height="15" fill="rgb(227,165,31)" fg:x="225" fg:w="6"/><text x="47.0275%" y="335.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="46.7775%" y="309" width="1.2474%" height="15" fill="rgb(228,167,24)" fg:x="225" fg:w="6"/><text x="47.0275%" y="319.50"></text></g><g><title>std::fs::read_to_string (20 samples, 4.16%)</title><rect x="44.2827%" y="789" width="4.1580%" height="15" fill="rgb(228,143,12)" fg:x="213" fg:w="20"/><text x="44.5327%" y="799.50">std::..</text></g><g><title>std::fs::read_to_string::inner (20 samples, 4.16%)</title><rect x="44.2827%" y="773" width="4.1580%" height="15" fill="rgb(249,149,8)" fg:x="213" fg:w="20"/><text x="44.5327%" y="783.50">std::..</text></g><g><title>std::fs::File::open (2 samples, 0.42%)</title><rect x="48.0249%" y="757" width="0.4158%" height="15" fill="rgb(243,35,44)" fg:x="231" fg:w="2"/><text x="48.2749%" y="767.50"></text></g><g><title>std::fs::OpenOptions::open (2 samples, 0.42%)</title><rect x="48.0249%" y="741" width="0.4158%" height="15" fill="rgb(246,89,9)" fg:x="231" fg:w="2"/><text x="48.2749%" y="751.50"></text></g><g><title>std::fs::OpenOptions::_open (2 samples, 0.42%)</title><rect x="48.0249%" y="725" width="0.4158%" height="15" fill="rgb(233,213,13)" fg:x="231" fg:w="2"/><text x="48.2749%" y="735.50"></text></g><g><title>std::sys::unix::fs::File::open (2 samples, 0.42%)</title><rect x="48.0249%" y="709" width="0.4158%" height="15" fill="rgb(233,141,41)" fg:x="231" fg:w="2"/><text x="48.2749%" y="719.50"></text></g><g><title>std::sys::common::small_c_string::run_path_with_cstr (2 samples, 0.42%)</title><rect x="48.0249%" y="693" width="0.4158%" height="15" fill="rgb(239,167,4)" fg:x="231" fg:w="2"/><text x="48.2749%" y="703.50"></text></g><g><title>std::sys::common::small_c_string::run_with_cstr (2 samples, 0.42%)</title><rect x="48.0249%" y="677" width="0.4158%" height="15" fill="rgb(209,217,16)" fg:x="231" fg:w="2"/><text x="48.2749%" y="687.50"></text></g><g><title>std::sys::unix::fs::File::open::{{closure}} (2 samples, 0.42%)</title><rect x="48.0249%" y="661" width="0.4158%" height="15" fill="rgb(219,88,35)" fg:x="231" fg:w="2"/><text x="48.2749%" y="671.50"></text></g><g><title>std::sys::unix::fs::File::open_c (2 samples, 0.42%)</title><rect x="48.0249%" y="645" width="0.4158%" height="15" fill="rgb(220,193,23)" fg:x="231" fg:w="2"/><text x="48.2749%" y="655.50"></text></g><g><title>std::sys::unix::cvt_r (2 samples, 0.42%)</title><rect x="48.0249%" y="629" width="0.4158%" height="15" fill="rgb(230,90,52)" fg:x="231" fg:w="2"/><text x="48.2749%" y="639.50"></text></g><g><title>std::sys::unix::fs::File::open_c::{{closure}} (2 samples, 0.42%)</title><rect x="48.0249%" y="613" width="0.4158%" height="15" fill="rgb(252,106,19)" fg:x="231" fg:w="2"/><text x="48.2749%" y="623.50"></text></g><g><title>__libc_open64 (2 samples, 0.42%)</title><rect x="48.0249%" y="597" width="0.4158%" height="15" fill="rgb(206,74,20)" fg:x="231" fg:w="2"/><text x="48.2749%" y="607.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="48.0249%" y="581" width="0.4158%" height="15" fill="rgb(230,138,44)" fg:x="231" fg:w="2"/><text x="48.2749%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="48.2328%" y="565" width="0.2079%" height="15" fill="rgb(235,182,43)" fg:x="232" fg:w="1"/><text x="48.4828%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="48.2328%" y="549" width="0.2079%" height="15" fill="rgb(242,16,51)" fg:x="232" fg:w="1"/><text x="48.4828%" y="559.50"></text></g><g><title>std::sys::unix::futex::futex_wait (12 samples, 2.49%)</title><rect x="48.4407%" y="725" width="2.4948%" height="15" fill="rgb(248,9,4)" fg:x="233" fg:w="12"/><text x="48.6907%" y="735.50">st..</text></g><g><title>syscall (12 samples, 2.49%)</title><rect x="48.4407%" y="709" width="2.4948%" height="15" fill="rgb(210,31,22)" fg:x="233" fg:w="12"/><text x="48.6907%" y="719.50">sy..</text></g><g><title>[unknown] (12 samples, 2.49%)</title><rect x="48.4407%" y="693" width="2.4948%" height="15" fill="rgb(239,54,39)" fg:x="233" fg:w="12"/><text x="48.6907%" y="703.50">[u..</text></g><g><title>[unknown] (12 samples, 2.49%)</title><rect x="48.4407%" y="677" width="2.4948%" height="15" fill="rgb(230,99,41)" fg:x="233" fg:w="12"/><text x="48.6907%" y="687.50">[u..</text></g><g><title>[unknown] (12 samples, 2.49%)</title><rect x="48.4407%" y="661" width="2.4948%" height="15" fill="rgb(253,106,12)" fg:x="233" fg:w="12"/><text x="48.6907%" y="671.50">[u..</text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="49.6881%" y="645" width="1.2474%" height="15" fill="rgb(213,46,41)" fg:x="239" fg:w="6"/><text x="49.9381%" y="655.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="49.6881%" y="629" width="1.2474%" height="15" fill="rgb(215,133,35)" fg:x="239" fg:w="6"/><text x="49.9381%" y="639.50"></text></g><g><title>lab4::package::PackageDownloader::run (146 samples, 30.35%)</title><rect x="20.9979%" y="805" width="30.3534%" height="15" fill="rgb(213,28,5)" fg:x="101" fg:w="146"/><text x="21.2479%" y="815.50">lab4::package::PackageDownloader::run</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (14 samples, 2.91%)</title><rect x="48.4407%" y="789" width="2.9106%" height="15" fill="rgb(215,77,49)" fg:x="233" fg:w="14"/><text x="48.6907%" y="799.50">st..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (14 samples, 2.91%)</title><rect x="48.4407%" y="773" width="2.9106%" height="15" fill="rgb(248,100,22)" fg:x="233" fg:w="14"/><text x="48.6907%" y="783.50">st..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (14 samples, 2.91%)</title><rect x="48.4407%" y="757" width="2.9106%" height="15" fill="rgb(208,67,9)" fg:x="233" fg:w="14"/><text x="48.6907%" y="767.50">st..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (14 samples, 2.91%)</title><rect x="48.4407%" y="741" width="2.9106%" height="15" fill="rgb(219,133,21)" fg:x="233" fg:w="14"/><text x="48.6907%" y="751.50">st..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::spin (2 samples, 0.42%)</title><rect x="50.9356%" y="725" width="0.4158%" height="15" fill="rgb(246,46,29)" fg:x="245" fg:w="2"/><text x="51.1856%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicU32::load (2 samples, 0.42%)</title><rect x="50.9356%" y="709" width="0.4158%" height="15" fill="rgb(246,185,52)" fg:x="245" fg:w="2"/><text x="51.1856%" y="719.50"></text></g><g><title>core::sync::atomic::atomic_load (2 samples, 0.42%)</title><rect x="50.9356%" y="693" width="0.4158%" height="15" fill="rgb(252,136,11)" fg:x="245" fg:w="2"/><text x="51.1856%" y="703.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::unwrap (1 samples, 0.21%)</title><rect x="51.5593%" y="789" width="0.2079%" height="15" fill="rgb(219,138,53)" fg:x="248" fg:w="1"/><text x="51.8093%" y="799.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (3 samples, 0.62%)</title><rect x="51.7672%" y="773" width="0.6237%" height="15" fill="rgb(211,51,23)" fg:x="249" fg:w="3"/><text x="52.0172%" y="783.50"></text></g><g><title>crossbeam_channel::context::Context::with (43 samples, 8.94%)</title><rect x="52.3909%" y="757" width="8.9397%" height="15" fill="rgb(247,221,28)" fg:x="252" fg:w="43"/><text x="52.6409%" y="767.50">crossbeam_cha..</text></g><g><title>std::thread::local::LocalKey&lt;T&gt;::try_with (43 samples, 8.94%)</title><rect x="52.3909%" y="741" width="8.9397%" height="15" fill="rgb(251,222,45)" fg:x="252" fg:w="43"/><text x="52.6409%" y="751.50">std::thread::..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (43 samples, 8.94%)</title><rect x="52.3909%" y="725" width="8.9397%" height="15" fill="rgb(217,162,53)" fg:x="252" fg:w="43"/><text x="52.6409%" y="735.50">crossbeam_cha..</text></g><g><title>crossbeam_channel::context::Context::with::{{closure}} (43 samples, 8.94%)</title><rect x="52.3909%" y="709" width="8.9397%" height="15" fill="rgb(229,93,14)" fg:x="252" fg:w="43"/><text x="52.6409%" y="719.50">crossbeam_cha..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv::{{closure}} (43 samples, 8.94%)</title><rect x="52.3909%" y="693" width="8.9397%" height="15" fill="rgb(209,67,49)" fg:x="252" fg:w="43"/><text x="52.6409%" y="703.50">crossbeam_cha..</text></g><g><title>crossbeam_channel::context::Context::wait_until (43 samples, 8.94%)</title><rect x="52.3909%" y="677" width="8.9397%" height="15" fill="rgb(213,87,29)" fg:x="252" fg:w="43"/><text x="52.6409%" y="687.50">crossbeam_cha..</text></g><g><title>std::thread::park (43 samples, 8.94%)</title><rect x="52.3909%" y="661" width="8.9397%" height="15" fill="rgb(205,151,52)" fg:x="252" fg:w="43"/><text x="52.6409%" y="671.50">std::thread::..</text></g><g><title>std::sys_common::thread_parker::futex::Parker::park (43 samples, 8.94%)</title><rect x="52.3909%" y="645" width="8.9397%" height="15" fill="rgb(253,215,39)" fg:x="252" fg:w="43"/><text x="52.6409%" y="655.50">std::sys_comm..</text></g><g><title>std::sys::unix::futex::futex_wait (43 samples, 8.94%)</title><rect x="52.3909%" y="629" width="8.9397%" height="15" fill="rgb(221,220,41)" fg:x="252" fg:w="43"/><text x="52.6409%" y="639.50">std::sys::uni..</text></g><g><title>syscall (43 samples, 8.94%)</title><rect x="52.3909%" y="613" width="8.9397%" height="15" fill="rgb(218,133,21)" fg:x="252" fg:w="43"/><text x="52.6409%" y="623.50">syscall</text></g><g><title>[unknown] (43 samples, 8.94%)</title><rect x="52.3909%" y="597" width="8.9397%" height="15" fill="rgb(221,193,43)" fg:x="252" fg:w="43"/><text x="52.6409%" y="607.50">[unknown]</text></g><g><title>[unknown] (43 samples, 8.94%)</title><rect x="52.3909%" y="581" width="8.9397%" height="15" fill="rgb(240,128,52)" fg:x="252" fg:w="43"/><text x="52.6409%" y="591.50">[unknown]</text></g><g><title>[unknown] (43 samples, 8.94%)</title><rect x="52.3909%" y="565" width="8.9397%" height="15" fill="rgb(253,114,12)" fg:x="252" fg:w="43"/><text x="52.6409%" y="575.50">[unknown]</text></g><g><title>[unknown] (43 samples, 8.94%)</title><rect x="52.3909%" y="549" width="8.9397%" height="15" fill="rgb(215,223,47)" fg:x="252" fg:w="43"/><text x="52.6409%" y="559.50">[unknown]</text></g><g><title>[unknown] (43 samples, 8.94%)</title><rect x="52.3909%" y="533" width="8.9397%" height="15" fill="rgb(248,225,23)" fg:x="252" fg:w="43"/><text x="52.6409%" y="543.50">[unknown]</text></g><g><title>[unknown] (31 samples, 6.44%)</title><rect x="54.8857%" y="517" width="6.4449%" height="15" fill="rgb(250,108,0)" fg:x="264" fg:w="31"/><text x="55.1357%" y="527.50">[unknown]</text></g><g><title>[unknown] (13 samples, 2.70%)</title><rect x="58.6279%" y="501" width="2.7027%" height="15" fill="rgb(228,208,7)" fg:x="282" fg:w="13"/><text x="58.8779%" y="511.50">[u..</text></g><g><title>[unknown] (7 samples, 1.46%)</title><rect x="59.8753%" y="485" width="1.4553%" height="15" fill="rgb(244,45,10)" fg:x="288" fg:w="7"/><text x="60.1253%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="61.1227%" y="469" width="0.2079%" height="15" fill="rgb(207,125,25)" fg:x="294" fg:w="1"/><text x="61.3727%" y="479.50"></text></g><g><title>__GI___libc_free (2 samples, 0.42%)</title><rect x="61.5385%" y="741" width="0.4158%" height="15" fill="rgb(210,195,18)" fg:x="296" fg:w="2"/><text x="61.7885%" y="751.50"></text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::assume_init (1 samples, 0.21%)</title><rect x="61.9543%" y="741" width="0.2079%" height="15" fill="rgb(249,80,12)" fg:x="298" fg:w="1"/><text x="62.2043%" y="751.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::read (5 samples, 1.04%)</title><rect x="61.3306%" y="757" width="1.0395%" height="15" fill="rgb(221,65,9)" fg:x="295" fg:w="5"/><text x="61.5806%" y="767.50"></text></g><g><title>crossbeam_channel::flavors::list::Slot&lt;T&gt;::wait_write (1 samples, 0.21%)</title><rect x="62.1622%" y="741" width="0.2079%" height="15" fill="rgb(235,49,36)" fg:x="299" fg:w="1"/><text x="62.4122%" y="751.50"></text></g><g><title>core::sync::atomic::AtomicPtr&lt;T&gt;::load (4 samples, 0.83%)</title><rect x="64.8649%" y="741" width="0.8316%" height="15" fill="rgb(225,32,20)" fg:x="312" fg:w="4"/><text x="65.1149%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (4 samples, 0.83%)</title><rect x="64.8649%" y="725" width="0.8316%" height="15" fill="rgb(215,141,46)" fg:x="312" fg:w="4"/><text x="65.1149%" y="735.50"></text></g><g><title>core::sync::atomic::AtomicUsize::load (6 samples, 1.25%)</title><rect x="65.6965%" y="741" width="1.2474%" height="15" fill="rgb(250,160,47)" fg:x="316" fg:w="6"/><text x="65.9465%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_load (6 samples, 1.25%)</title><rect x="65.6965%" y="725" width="1.2474%" height="15" fill="rgb(216,222,40)" fg:x="316" fg:w="6"/><text x="65.9465%" y="735.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_recv (48 samples, 9.98%)</title><rect x="62.3701%" y="757" width="9.9792%" height="15" fill="rgb(234,217,39)" fg:x="300" fg:w="48"/><text x="62.6201%" y="767.50">crossbeam_chan..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (26 samples, 5.41%)</title><rect x="66.9439%" y="741" width="5.4054%" height="15" fill="rgb(207,178,40)" fg:x="322" fg:w="26"/><text x="67.1939%" y="751.50">crossbe..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (26 samples, 5.41%)</title><rect x="66.9439%" y="725" width="5.4054%" height="15" fill="rgb(221,136,13)" fg:x="322" fg:w="26"/><text x="67.1939%" y="735.50">core::i..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (26 samples, 5.41%)</title><rect x="66.9439%" y="709" width="5.4054%" height="15" fill="rgb(249,199,10)" fg:x="322" fg:w="26"/><text x="67.1939%" y="719.50">&lt;core::..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (26 samples, 5.41%)</title><rect x="66.9439%" y="693" width="5.4054%" height="15" fill="rgb(249,222,13)" fg:x="322" fg:w="26"/><text x="67.1939%" y="703.50">core::c..</text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (101 samples, 21.00%)</title><rect x="51.7672%" y="789" width="20.9979%" height="15" fill="rgb(244,185,38)" fg:x="249" fg:w="101"/><text x="52.0172%" y="799.50">crossbeam_channel::channel::Recei..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::recv (98 samples, 20.37%)</title><rect x="52.3909%" y="773" width="20.3742%" height="15" fill="rgb(236,202,9)" fg:x="252" fg:w="98"/><text x="52.6409%" y="783.50">crossbeam_channel::flavors::list..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (2 samples, 0.42%)</title><rect x="72.3493%" y="757" width="0.4158%" height="15" fill="rgb(250,229,37)" fg:x="348" fg:w="2"/><text x="72.5993%" y="767.50"></text></g><g><title>core::sync::atomic::spin_loop_hint (2 samples, 0.42%)</title><rect x="72.3493%" y="741" width="0.4158%" height="15" fill="rgb(206,174,23)" fg:x="348" fg:w="2"/><text x="72.5993%" y="751.50"></text></g><g><title>core::hint::spin_loop (2 samples, 0.42%)</title><rect x="72.3493%" y="725" width="0.4158%" height="15" fill="rgb(211,33,43)" fg:x="348" fg:w="2"/><text x="72.5993%" y="735.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_pause (2 samples, 0.42%)</title><rect x="72.3493%" y="709" width="0.4158%" height="15" fill="rgb(245,58,50)" fg:x="348" fg:w="2"/><text x="72.5993%" y="719.50"></text></g><g><title>alloc::boxed::Box&lt;T&gt;::new (1 samples, 0.21%)</title><rect x="74.2204%" y="741" width="0.2079%" height="15" fill="rgb(244,68,36)" fg:x="357" fg:w="1"/><text x="74.4704%" y="751.50"></text></g><g><title>[libc.so.6] (1 samples, 0.21%)</title><rect x="74.2204%" y="725" width="0.2079%" height="15" fill="rgb(232,229,15)" fg:x="357" fg:w="1"/><text x="74.4704%" y="735.50"></text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::start_send (26 samples, 5.41%)</title><rect x="73.3888%" y="757" width="5.4054%" height="15" fill="rgb(254,30,23)" fg:x="353" fg:w="26"/><text x="73.6388%" y="767.50">crossbe..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (21 samples, 4.37%)</title><rect x="74.4283%" y="741" width="4.3659%" height="15" fill="rgb(235,160,14)" fg:x="358" fg:w="21"/><text x="74.6783%" y="751.50">cross..</text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (21 samples, 4.37%)</title><rect x="74.4283%" y="725" width="4.3659%" height="15" fill="rgb(212,155,44)" fg:x="358" fg:w="21"/><text x="74.6783%" y="735.50">core:..</text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (21 samples, 4.37%)</title><rect x="74.4283%" y="709" width="4.3659%" height="15" fill="rgb(226,2,50)" fg:x="358" fg:w="21"/><text x="74.6783%" y="719.50">&lt;core..</text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (20 samples, 4.16%)</title><rect x="74.6362%" y="693" width="4.1580%" height="15" fill="rgb(234,177,6)" fg:x="359" fg:w="20"/><text x="74.8862%" y="703.50">core:..</text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (35 samples, 7.28%)</title><rect x="72.7651%" y="789" width="7.2765%" height="15" fill="rgb(217,24,9)" fg:x="350" fg:w="35"/><text x="73.0151%" y="799.50">crossbeam_..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::send (34 samples, 7.07%)</title><rect x="72.9730%" y="773" width="7.0686%" height="15" fill="rgb(220,13,46)" fg:x="351" fg:w="34"/><text x="73.2230%" y="783.50">crossbeam..</text></g><g><title>crossbeam_channel::flavors::list::Channel&lt;T&gt;::write (6 samples, 1.25%)</title><rect x="78.7942%" y="757" width="1.2474%" height="15" fill="rgb(239,221,27)" fg:x="379" fg:w="6"/><text x="79.0442%" y="767.50"></text></g><g><title>core::sync::atomic::AtomicUsize::fetch_or (6 samples, 1.25%)</title><rect x="78.7942%" y="741" width="1.2474%" height="15" fill="rgb(222,198,25)" fg:x="379" fg:w="6"/><text x="79.0442%" y="751.50"></text></g><g><title>core::sync::atomic::atomic_or (6 samples, 1.25%)</title><rect x="78.7942%" y="725" width="1.2474%" height="15" fill="rgb(211,99,13)" fg:x="379" fg:w="6"/><text x="79.0442%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;lab4::package::Package&gt;&gt; (1 samples, 0.21%)</title><rect x="80.0416%" y="773" width="0.2079%" height="15" fill="rgb(232,111,31)" fg:x="385" fg:w="1"/><text x="80.2916%" y="783.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="80.0416%" y="757" width="0.2079%" height="15" fill="rgb(245,82,37)" fg:x="385" fg:w="1"/><text x="80.2916%" y="767.50"></text></g><g><title>core::ptr::drop_in_place&lt;[lab4::package::Package]&gt; (1 samples, 0.21%)</title><rect x="80.0416%" y="741" width="0.2079%" height="15" fill="rgb(227,149,46)" fg:x="385" fg:w="1"/><text x="80.2916%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;lab4::package::Package&gt; (1 samples, 0.21%)</title><rect x="80.0416%" y="725" width="0.2079%" height="15" fill="rgb(218,36,50)" fg:x="385" fg:w="1"/><text x="80.2916%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (1 samples, 0.21%)</title><rect x="80.0416%" y="709" width="0.2079%" height="15" fill="rgb(226,80,48)" fg:x="385" fg:w="1"/><text x="80.2916%" y="719.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.21%)</title><rect x="80.0416%" y="693" width="0.2079%" height="15" fill="rgb(238,224,15)" fg:x="385" fg:w="1"/><text x="80.2916%" y="703.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.21%)</title><rect x="80.0416%" y="677" width="0.2079%" height="15" fill="rgb(241,136,10)" fg:x="385" fg:w="1"/><text x="80.2916%" y="687.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="80.0416%" y="661" width="0.2079%" height="15" fill="rgb(208,32,45)" fg:x="385" fg:w="1"/><text x="80.2916%" y="671.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.21%)</title><rect x="80.0416%" y="645" width="0.2079%" height="15" fill="rgb(207,135,9)" fg:x="385" fg:w="1"/><text x="80.2916%" y="655.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.21%)</title><rect x="80.0416%" y="629" width="0.2079%" height="15" fill="rgb(206,86,44)" fg:x="385" fg:w="1"/><text x="80.2916%" y="639.50"></text></g><g><title>__GI___libc_free (1 samples, 0.21%)</title><rect x="80.0416%" y="613" width="0.2079%" height="15" fill="rgb(245,177,15)" fg:x="385" fg:w="1"/><text x="80.2916%" y="623.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::size_hint (1 samples, 0.21%)</title><rect x="80.2495%" y="565" width="0.2079%" height="15" fill="rgb(206,64,50)" fg:x="386" fg:w="1"/><text x="80.4995%" y="575.50"></text></g><g><title>core::option::Option&lt;T&gt;::is_some (1 samples, 0.21%)</title><rect x="80.2495%" y="549" width="0.2079%" height="15" fill="rgb(234,36,40)" fg:x="386" fg:w="1"/><text x="80.4995%" y="559.50"></text></g><g><title>hex::decode (2 samples, 0.42%)</title><rect x="80.2495%" y="757" width="0.4158%" height="15" fill="rgb(213,64,8)" fg:x="386" fg:w="2"/><text x="80.4995%" y="767.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (2 samples, 0.42%)</title><rect x="80.2495%" y="741" width="0.4158%" height="15" fill="rgb(210,75,36)" fg:x="386" fg:w="2"/><text x="80.4995%" y="751.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.42%)</title><rect x="80.2495%" y="725" width="0.4158%" height="15" fill="rgb(229,88,21)" fg:x="386" fg:w="2"/><text x="80.4995%" y="735.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (2 samples, 0.42%)</title><rect x="80.2495%" y="709" width="0.4158%" height="15" fill="rgb(252,204,47)" fg:x="386" fg:w="2"/><text x="80.4995%" y="719.50"></text></g><g><title>core::iter::adapters::try_process (2 samples, 0.42%)</title><rect x="80.2495%" y="693" width="0.4158%" height="15" fill="rgb(208,77,27)" fg:x="386" fg:w="2"/><text x="80.4995%" y="703.50"></text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (2 samples, 0.42%)</title><rect x="80.2495%" y="677" width="0.4158%" height="15" fill="rgb(221,76,26)" fg:x="386" fg:w="2"/><text x="80.4995%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.42%)</title><rect x="80.2495%" y="661" width="0.4158%" height="15" fill="rgb(225,139,18)" fg:x="386" fg:w="2"/><text x="80.4995%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (2 samples, 0.42%)</title><rect x="80.2495%" y="645" width="0.4158%" height="15" fill="rgb(230,137,11)" fg:x="386" fg:w="2"/><text x="80.4995%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (2 samples, 0.42%)</title><rect x="80.2495%" y="629" width="0.4158%" height="15" fill="rgb(212,28,1)" fg:x="386" fg:w="2"/><text x="80.4995%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (2 samples, 0.42%)</title><rect x="80.2495%" y="613" width="0.4158%" height="15" fill="rgb(248,164,17)" fg:x="386" fg:w="2"/><text x="80.4995%" y="623.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (2 samples, 0.42%)</title><rect x="80.2495%" y="597" width="0.4158%" height="15" fill="rgb(222,171,42)" fg:x="386" fg:w="2"/><text x="80.4995%" y="607.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (2 samples, 0.42%)</title><rect x="80.2495%" y="581" width="0.4158%" height="15" fill="rgb(243,84,45)" fg:x="386" fg:w="2"/><text x="80.4995%" y="591.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.21%)</title><rect x="80.4574%" y="565" width="0.2079%" height="15" fill="rgb(252,49,23)" fg:x="387" fg:w="1"/><text x="80.7074%" y="575.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.21%)</title><rect x="80.4574%" y="549" width="0.2079%" height="15" fill="rgb(215,19,7)" fg:x="387" fg:w="1"/><text x="80.7074%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.21%)</title><rect x="80.4574%" y="533" width="0.2079%" height="15" fill="rgb(238,81,41)" fg:x="387" fg:w="1"/><text x="80.7074%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.21%)</title><rect x="80.4574%" y="517" width="0.2079%" height="15" fill="rgb(210,199,37)" fg:x="387" fg:w="1"/><text x="80.7074%" y="527.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.21%)</title><rect x="80.4574%" y="501" width="0.2079%" height="15" fill="rgb(244,192,49)" fg:x="387" fg:w="1"/><text x="80.7074%" y="511.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (1 samples, 0.21%)</title><rect x="80.4574%" y="485" width="0.2079%" height="15" fill="rgb(226,211,11)" fg:x="387" fg:w="1"/><text x="80.7074%" y="495.50"></text></g><g><title>alloc::alloc::Global::grow_impl (1 samples, 0.21%)</title><rect x="80.4574%" y="469" width="0.2079%" height="15" fill="rgb(236,162,54)" fg:x="387" fg:w="1"/><text x="80.7074%" y="479.50"></text></g><g><title>alloc::alloc::realloc (1 samples, 0.21%)</title><rect x="80.4574%" y="453" width="0.2079%" height="15" fill="rgb(220,229,9)" fg:x="387" fg:w="1"/><text x="80.7074%" y="463.50"></text></g><g><title>__GI___libc_realloc (1 samples, 0.21%)</title><rect x="80.4574%" y="437" width="0.2079%" height="15" fill="rgb(250,87,22)" fg:x="387" fg:w="1"/><text x="80.7074%" y="447.50"></text></g><g><title>_int_realloc (1 samples, 0.21%)</title><rect x="80.4574%" y="421" width="0.2079%" height="15" fill="rgb(239,43,17)" fg:x="387" fg:w="1"/><text x="80.7074%" y="431.50"></text></g><g><title>lab4::checksum::Checksum::update (3 samples, 0.62%)</title><rect x="80.2495%" y="773" width="0.6237%" height="15" fill="rgb(231,177,25)" fg:x="386" fg:w="3"/><text x="80.4995%" y="783.50"></text></g><g><title>hex::encode (1 samples, 0.21%)</title><rect x="80.6653%" y="757" width="0.2079%" height="15" fill="rgb(219,179,1)" fg:x="388" fg:w="1"/><text x="80.9153%" y="767.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (1 samples, 0.21%)</title><rect x="80.6653%" y="741" width="0.2079%" height="15" fill="rgb(238,219,53)" fg:x="388" fg:w="1"/><text x="80.9153%" y="751.50"></text></g><g><title>hex::encode_to_iter (1 samples, 0.21%)</title><rect x="80.6653%" y="725" width="0.2079%" height="15" fill="rgb(232,167,36)" fg:x="388" fg:w="1"/><text x="80.9153%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="80.6653%" y="709" width="0.2079%" height="15" fill="rgb(244,19,51)" fg:x="388" fg:w="1"/><text x="80.9153%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="80.6653%" y="693" width="0.2079%" height="15" fill="rgb(224,6,22)" fg:x="388" fg:w="1"/><text x="80.9153%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="80.6653%" y="677" width="0.2079%" height="15" fill="rgb(224,145,5)" fg:x="388" fg:w="1"/><text x="80.9153%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="80.6653%" y="661" width="0.2079%" height="15" fill="rgb(234,130,49)" fg:x="388" fg:w="1"/><text x="80.9153%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="80.6653%" y="645" width="0.2079%" height="15" fill="rgb(254,6,2)" fg:x="388" fg:w="1"/><text x="80.9153%" y="655.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="80.6653%" y="629" width="0.2079%" height="15" fill="rgb(208,96,46)" fg:x="388" fg:w="1"/><text x="80.9153%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.21%)</title><rect x="80.6653%" y="613" width="0.2079%" height="15" fill="rgb(239,3,39)" fg:x="388" fg:w="1"/><text x="80.9153%" y="623.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.21%)</title><rect x="80.6653%" y="597" width="0.2079%" height="15" fill="rgb(233,210,1)" fg:x="388" fg:w="1"/><text x="80.9153%" y="607.50"></text></g><g><title>lab4::checksum::Checksum::with_sha256 (1 samples, 0.21%)</title><rect x="80.8732%" y="773" width="0.2079%" height="15" fill="rgb(244,137,37)" fg:x="389" fg:w="1"/><text x="81.1232%" y="783.50"></text></g><g><title>hex::encode (1 samples, 0.21%)</title><rect x="80.8732%" y="757" width="0.2079%" height="15" fill="rgb(240,136,2)" fg:x="389" fg:w="1"/><text x="81.1232%" y="767.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (1 samples, 0.21%)</title><rect x="80.8732%" y="741" width="0.2079%" height="15" fill="rgb(239,18,37)" fg:x="389" fg:w="1"/><text x="81.1232%" y="751.50"></text></g><g><title>hex::encode_to_iter (1 samples, 0.21%)</title><rect x="80.8732%" y="725" width="0.2079%" height="15" fill="rgb(218,185,22)" fg:x="389" fg:w="1"/><text x="81.1232%" y="735.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.21%)</title><rect x="80.8732%" y="709" width="0.2079%" height="15" fill="rgb(225,218,4)" fg:x="389" fg:w="1"/><text x="81.1232%" y="719.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.21%)</title><rect x="80.8732%" y="693" width="0.2079%" height="15" fill="rgb(230,182,32)" fg:x="389" fg:w="1"/><text x="81.1232%" y="703.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.21%)</title><rect x="80.8732%" y="677" width="0.2079%" height="15" fill="rgb(242,56,43)" fg:x="389" fg:w="1"/><text x="81.1232%" y="687.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (1 samples, 0.21%)</title><rect x="80.8732%" y="661" width="0.2079%" height="15" fill="rgb(233,99,24)" fg:x="389" fg:w="1"/><text x="81.1232%" y="671.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (1 samples, 0.21%)</title><rect x="80.8732%" y="645" width="0.2079%" height="15" fill="rgb(234,209,42)" fg:x="389" fg:w="1"/><text x="81.1232%" y="655.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.21%)</title><rect x="80.8732%" y="629" width="0.2079%" height="15" fill="rgb(227,7,12)" fg:x="389" fg:w="1"/><text x="81.1232%" y="639.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.21%)</title><rect x="80.8732%" y="613" width="0.2079%" height="15" fill="rgb(245,203,43)" fg:x="389" fg:w="1"/><text x="81.1232%" y="623.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.21%)</title><rect x="80.8732%" y="597" width="0.2079%" height="15" fill="rgb(238,205,33)" fg:x="389" fg:w="1"/><text x="81.1232%" y="607.50"></text></g><g><title>std::io::Write::write_fmt (7 samples, 1.46%)</title><rect x="81.0811%" y="773" width="1.4553%" height="15" fill="rgb(231,56,7)" fg:x="390" fg:w="7"/><text x="81.3311%" y="783.50"></text></g><g><title>core::fmt::write (7 samples, 1.46%)</title><rect x="81.0811%" y="757" width="1.4553%" height="15" fill="rgb(244,186,29)" fg:x="390" fg:w="7"/><text x="81.3311%" y="767.50"></text></g><g><title>&lt;std::io::Write::write_fmt::Adapter&lt;T&gt; as core::fmt::Write&gt;::write_str (7 samples, 1.46%)</title><rect x="81.0811%" y="741" width="1.4553%" height="15" fill="rgb(234,111,31)" fg:x="390" fg:w="7"/><text x="81.3311%" y="751.50"></text></g><g><title>&lt;std::io::stdio::StdoutLock as std::io::Write&gt;::write_all (7 samples, 1.46%)</title><rect x="81.0811%" y="725" width="1.4553%" height="15" fill="rgb(241,149,10)" fg:x="390" fg:w="7"/><text x="81.3311%" y="735.50"></text></g><g><title>&lt;std::io::buffered::linewriter::LineWriter&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 1.46%)</title><rect x="81.0811%" y="709" width="1.4553%" height="15" fill="rgb(249,206,44)" fg:x="390" fg:w="7"/><text x="81.3311%" y="719.50"></text></g><g><title>&lt;std::io::buffered::linewritershim::LineWriterShim&lt;W&gt; as std::io::Write&gt;::write_all (7 samples, 1.46%)</title><rect x="81.0811%" y="693" width="1.4553%" height="15" fill="rgb(251,153,30)" fg:x="390" fg:w="7"/><text x="81.3311%" y="703.50"></text></g><g><title>std::io::buffered::bufwriter::BufWriter&lt;W&gt;::flush_buf (7 samples, 1.46%)</title><rect x="81.0811%" y="677" width="1.4553%" height="15" fill="rgb(239,152,38)" fg:x="390" fg:w="7"/><text x="81.3311%" y="687.50"></text></g><g><title>&lt;std::io::stdio::StdoutRaw as std::io::Write&gt;::write (6 samples, 1.25%)</title><rect x="81.2890%" y="661" width="1.2474%" height="15" fill="rgb(249,139,47)" fg:x="391" fg:w="6"/><text x="81.5390%" y="671.50"></text></g><g><title>&lt;std::sys::unix::stdio::Stdout as std::io::Write&gt;::write (6 samples, 1.25%)</title><rect x="81.2890%" y="645" width="1.2474%" height="15" fill="rgb(244,64,35)" fg:x="391" fg:w="6"/><text x="81.5390%" y="655.50"></text></g><g><title>std::sys::unix::fd::FileDesc::write (6 samples, 1.25%)</title><rect x="81.2890%" y="629" width="1.2474%" height="15" fill="rgb(216,46,15)" fg:x="391" fg:w="6"/><text x="81.5390%" y="639.50"></text></g><g><title>__GI___libc_write (6 samples, 1.25%)</title><rect x="81.2890%" y="613" width="1.2474%" height="15" fill="rgb(250,74,19)" fg:x="391" fg:w="6"/><text x="81.5390%" y="623.50"></text></g><g><title>__GI___libc_write (6 samples, 1.25%)</title><rect x="81.2890%" y="597" width="1.2474%" height="15" fill="rgb(249,42,33)" fg:x="391" fg:w="6"/><text x="81.5390%" y="607.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="81.2890%" y="581" width="1.2474%" height="15" fill="rgb(242,149,17)" fg:x="391" fg:w="6"/><text x="81.5390%" y="591.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="81.2890%" y="565" width="1.2474%" height="15" fill="rgb(244,29,21)" fg:x="391" fg:w="6"/><text x="81.5390%" y="575.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="81.2890%" y="549" width="1.2474%" height="15" fill="rgb(220,130,37)" fg:x="391" fg:w="6"/><text x="81.5390%" y="559.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="81.2890%" y="533" width="1.2474%" height="15" fill="rgb(211,67,2)" fg:x="391" fg:w="6"/><text x="81.5390%" y="543.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="517" width="1.0395%" height="15" fill="rgb(235,68,52)" fg:x="392" fg:w="5"/><text x="81.7469%" y="527.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="501" width="1.0395%" height="15" fill="rgb(246,142,3)" fg:x="392" fg:w="5"/><text x="81.7469%" y="511.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="485" width="1.0395%" height="15" fill="rgb(241,25,7)" fg:x="392" fg:w="5"/><text x="81.7469%" y="495.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="469" width="1.0395%" height="15" fill="rgb(242,119,39)" fg:x="392" fg:w="5"/><text x="81.7469%" y="479.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="453" width="1.0395%" height="15" fill="rgb(241,98,45)" fg:x="392" fg:w="5"/><text x="81.7469%" y="463.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="437" width="1.0395%" height="15" fill="rgb(254,28,30)" fg:x="392" fg:w="5"/><text x="81.7469%" y="447.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="421" width="1.0395%" height="15" fill="rgb(241,142,54)" fg:x="392" fg:w="5"/><text x="81.7469%" y="431.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="405" width="1.0395%" height="15" fill="rgb(222,85,15)" fg:x="392" fg:w="5"/><text x="81.7469%" y="415.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="81.4969%" y="389" width="1.0395%" height="15" fill="rgb(210,85,47)" fg:x="392" fg:w="5"/><text x="81.7469%" y="399.50"></text></g><g><title>[unknown] (3 samples, 0.62%)</title><rect x="81.9127%" y="373" width="0.6237%" height="15" fill="rgb(224,206,25)" fg:x="394" fg:w="3"/><text x="82.1627%" y="383.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="82.1206%" y="357" width="0.4158%" height="15" fill="rgb(243,201,19)" fg:x="395" fg:w="2"/><text x="82.3706%" y="367.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="82.3285%" y="341" width="0.2079%" height="15" fill="rgb(236,59,4)" fg:x="396" fg:w="1"/><text x="82.5785%" y="351.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="82.3285%" y="325" width="0.2079%" height="15" fill="rgb(254,179,45)" fg:x="396" fg:w="1"/><text x="82.5785%" y="335.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="82.3285%" y="309" width="0.2079%" height="15" fill="rgb(226,14,10)" fg:x="396" fg:w="1"/><text x="82.5785%" y="319.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="82.3285%" y="293" width="0.2079%" height="15" fill="rgb(244,27,41)" fg:x="396" fg:w="1"/><text x="82.5785%" y="303.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="82.3285%" y="277" width="0.2079%" height="15" fill="rgb(235,35,32)" fg:x="396" fg:w="1"/><text x="82.5785%" y="287.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="82.3285%" y="261" width="0.2079%" height="15" fill="rgb(218,68,31)" fg:x="396" fg:w="1"/><text x="82.5785%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="82.3285%" y="245" width="0.2079%" height="15" fill="rgb(207,120,37)" fg:x="396" fg:w="1"/><text x="82.5785%" y="255.50"></text></g><g><title>std::panic::catch_unwind (372 samples, 77.34%)</title><rect x="17.0478%" y="917" width="77.3389%" height="15" fill="rgb(227,98,0)" fg:x="82" fg:w="372"/><text x="17.2978%" y="927.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (372 samples, 77.34%)</title><rect x="17.0478%" y="901" width="77.3389%" height="15" fill="rgb(207,7,3)" fg:x="82" fg:w="372"/><text x="17.2978%" y="911.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (372 samples, 77.34%)</title><rect x="17.0478%" y="885" width="77.3389%" height="15" fill="rgb(206,98,19)" fg:x="82" fg:w="372"/><text x="17.2978%" y="895.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (372 samples, 77.34%)</title><rect x="17.0478%" y="869" width="77.3389%" height="15" fill="rgb(217,5,26)" fg:x="82" fg:w="372"/><text x="17.2978%" y="879.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (372 samples, 77.34%)</title><rect x="17.0478%" y="853" width="77.3389%" height="15" fill="rgb(235,190,38)" fg:x="82" fg:w="372"/><text x="17.2978%" y="863.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (372 samples, 77.34%)</title><rect x="17.0478%" y="837" width="77.3389%" height="15" fill="rgb(247,86,24)" fg:x="82" fg:w="372"/><text x="17.2978%" y="847.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::hackathon::{{closure}} (372 samples, 77.34%)</title><rect x="17.0478%" y="821" width="77.3389%" height="15" fill="rgb(205,101,16)" fg:x="82" fg:w="372"/><text x="17.2978%" y="831.50">lab4::hackathon::{{closure}}</text></g><g><title>lab4::student::Student::run (207 samples, 43.04%)</title><rect x="51.3514%" y="805" width="43.0353%" height="15" fill="rgb(246,168,33)" fg:x="247" fg:w="207"/><text x="51.6014%" y="815.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (69 samples, 14.35%)</title><rect x="80.0416%" y="789" width="14.3451%" height="15" fill="rgb(231,114,1)" fg:x="385" fg:w="69"/><text x="80.2916%" y="799.50">lab4::student::Student..</text></g><g><title>std::sync::mutex::Mutex&lt;T&gt;::lock (57 samples, 11.85%)</title><rect x="82.5364%" y="773" width="11.8503%" height="15" fill="rgb(207,184,53)" fg:x="397" fg:w="57"/><text x="82.7864%" y="783.50">std::sync::mutex::..</text></g><g><title>std::sys_common::mutex::MovableMutex::raw_lock (57 samples, 11.85%)</title><rect x="82.5364%" y="757" width="11.8503%" height="15" fill="rgb(224,95,51)" fg:x="397" fg:w="57"/><text x="82.7864%" y="767.50">std::sys_common::m..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock (57 samples, 11.85%)</title><rect x="82.5364%" y="741" width="11.8503%" height="15" fill="rgb(212,188,45)" fg:x="397" fg:w="57"/><text x="82.7864%" y="751.50">std::sys::unix::lo..</text></g><g><title>std::sys::unix::locks::futex_mutex::Mutex::lock_contended (57 samples, 11.85%)</title><rect x="82.5364%" y="725" width="11.8503%" height="15" fill="rgb(223,154,38)" fg:x="397" fg:w="57"/><text x="82.7864%" y="735.50">std::sys::unix::lo..</text></g><g><title>std::sys::unix::futex::futex_wait (57 samples, 11.85%)</title><rect x="82.5364%" y="709" width="11.8503%" height="15" fill="rgb(251,22,52)" fg:x="397" fg:w="57"/><text x="82.7864%" y="719.50">std::sys::unix::fu..</text></g><g><title>syscall (57 samples, 11.85%)</title><rect x="82.5364%" y="693" width="11.8503%" height="15" fill="rgb(229,209,22)" fg:x="397" fg:w="57"/><text x="82.7864%" y="703.50">syscall</text></g><g><title>[unknown] (57 samples, 11.85%)</title><rect x="82.5364%" y="677" width="11.8503%" height="15" fill="rgb(234,138,34)" fg:x="397" fg:w="57"/><text x="82.7864%" y="687.50">[unknown]</text></g><g><title>[unknown] (57 samples, 11.85%)</title><rect x="82.5364%" y="661" width="11.8503%" height="15" fill="rgb(212,95,11)" fg:x="397" fg:w="57"/><text x="82.7864%" y="671.50">[unknown]</text></g><g><title>[unknown] (57 samples, 11.85%)</title><rect x="82.5364%" y="645" width="11.8503%" height="15" fill="rgb(240,179,47)" fg:x="397" fg:w="57"/><text x="82.7864%" y="655.50">[unknown]</text></g><g><title>[unknown] (39 samples, 8.11%)</title><rect x="86.2786%" y="629" width="8.1081%" height="15" fill="rgb(240,163,11)" fg:x="415" fg:w="39"/><text x="86.5286%" y="639.50">[unknown]</text></g><g><title>[unknown] (33 samples, 6.86%)</title><rect x="87.5260%" y="613" width="6.8607%" height="15" fill="rgb(236,37,12)" fg:x="421" fg:w="33"/><text x="87.7760%" y="623.50">[unknown]</text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="93.1393%" y="597" width="1.2474%" height="15" fill="rgb(232,164,16)" fg:x="448" fg:w="6"/><text x="93.3893%" y="607.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="93.1393%" y="581" width="1.2474%" height="15" fill="rgb(244,205,15)" fg:x="448" fg:w="6"/><text x="93.3893%" y="591.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="93.1393%" y="565" width="1.2474%" height="15" fill="rgb(223,117,47)" fg:x="448" fg:w="6"/><text x="93.3893%" y="575.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="93.1393%" y="549" width="1.2474%" height="15" fill="rgb(244,107,35)" fg:x="448" fg:w="6"/><text x="93.3893%" y="559.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="93.1393%" y="533" width="1.2474%" height="15" fill="rgb(205,140,8)" fg:x="448" fg:w="6"/><text x="93.3893%" y="543.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="93.1393%" y="517" width="1.2474%" height="15" fill="rgb(228,84,46)" fg:x="448" fg:w="6"/><text x="93.3893%" y="527.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="93.1393%" y="501" width="1.2474%" height="15" fill="rgb(254,188,9)" fg:x="448" fg:w="6"/><text x="93.3893%" y="511.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="94.3867%" y="757" width="1.2474%" height="15" fill="rgb(206,112,54)" fg:x="454" fg:w="6"/><text x="94.6367%" y="767.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="94.3867%" y="741" width="1.2474%" height="15" fill="rgb(216,84,49)" fg:x="454" fg:w="6"/><text x="94.6367%" y="751.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="94.3867%" y="725" width="1.2474%" height="15" fill="rgb(214,194,35)" fg:x="454" fg:w="6"/><text x="94.6367%" y="735.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="94.3867%" y="709" width="1.2474%" height="15" fill="rgb(249,28,3)" fg:x="454" fg:w="6"/><text x="94.6367%" y="719.50"></text></g><g><title>[unknown] (6 samples, 1.25%)</title><rect x="94.3867%" y="693" width="1.2474%" height="15" fill="rgb(222,56,52)" fg:x="454" fg:w="6"/><text x="94.6367%" y="703.50"></text></g><g><title>__GI___libc_malloc (8 samples, 1.66%)</title><rect x="94.3867%" y="885" width="1.6632%" height="15" fill="rgb(245,217,50)" fg:x="454" fg:w="8"/><text x="94.6367%" y="895.50"></text></g><g><title>tcache_init (8 samples, 1.66%)</title><rect x="94.3867%" y="869" width="1.6632%" height="15" fill="rgb(213,201,24)" fg:x="454" fg:w="8"/><text x="94.6367%" y="879.50"></text></g><g><title>tcache_init (8 samples, 1.66%)</title><rect x="94.3867%" y="853" width="1.6632%" height="15" fill="rgb(248,116,28)" fg:x="454" fg:w="8"/><text x="94.6367%" y="863.50"></text></g><g><title>arena_get2 (8 samples, 1.66%)</title><rect x="94.3867%" y="837" width="1.6632%" height="15" fill="rgb(219,72,43)" fg:x="454" fg:w="8"/><text x="94.6367%" y="847.50"></text></g><g><title>arena_get2 (8 samples, 1.66%)</title><rect x="94.3867%" y="821" width="1.6632%" height="15" fill="rgb(209,138,14)" fg:x="454" fg:w="8"/><text x="94.6367%" y="831.50"></text></g><g><title>_int_new_arena (8 samples, 1.66%)</title><rect x="94.3867%" y="805" width="1.6632%" height="15" fill="rgb(222,18,33)" fg:x="454" fg:w="8"/><text x="94.6367%" y="815.50"></text></g><g><title>new_heap (8 samples, 1.66%)</title><rect x="94.3867%" y="789" width="1.6632%" height="15" fill="rgb(213,199,7)" fg:x="454" fg:w="8"/><text x="94.6367%" y="799.50"></text></g><g><title>alloc_new_heap (8 samples, 1.66%)</title><rect x="94.3867%" y="773" width="1.6632%" height="15" fill="rgb(250,110,10)" fg:x="454" fg:w="8"/><text x="94.6367%" y="783.50"></text></g><g><title>__GI___mprotect (2 samples, 0.42%)</title><rect x="95.6341%" y="757" width="0.4158%" height="15" fill="rgb(248,123,6)" fg:x="460" fg:w="2"/><text x="95.8841%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="741" width="0.4158%" height="15" fill="rgb(206,91,31)" fg:x="460" fg:w="2"/><text x="95.8841%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="725" width="0.4158%" height="15" fill="rgb(211,154,13)" fg:x="460" fg:w="2"/><text x="95.8841%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="709" width="0.4158%" height="15" fill="rgb(225,148,7)" fg:x="460" fg:w="2"/><text x="95.8841%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="693" width="0.4158%" height="15" fill="rgb(220,160,43)" fg:x="460" fg:w="2"/><text x="95.8841%" y="703.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="677" width="0.4158%" height="15" fill="rgb(213,52,39)" fg:x="460" fg:w="2"/><text x="95.8841%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="661" width="0.4158%" height="15" fill="rgb(243,137,7)" fg:x="460" fg:w="2"/><text x="95.8841%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="645" width="0.4158%" height="15" fill="rgb(230,79,13)" fg:x="460" fg:w="2"/><text x="95.8841%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="629" width="0.4158%" height="15" fill="rgb(247,105,23)" fg:x="460" fg:w="2"/><text x="95.8841%" y="639.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="95.6341%" y="613" width="0.4158%" height="15" fill="rgb(223,179,41)" fg:x="460" fg:w="2"/><text x="95.8841%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="95.8420%" y="597" width="0.2079%" height="15" fill="rgb(218,9,34)" fg:x="461" fg:w="1"/><text x="96.0920%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="95.8420%" y="581" width="0.2079%" height="15" fill="rgb(222,106,8)" fg:x="461" fg:w="1"/><text x="96.0920%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="95.8420%" y="565" width="0.2079%" height="15" fill="rgb(211,220,0)" fg:x="461" fg:w="1"/><text x="96.0920%" y="575.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (381 samples, 79.21%)</title><rect x="17.0478%" y="981" width="79.2100%" height="15" fill="rgb(229,52,16)" fg:x="82" fg:w="381"/><text x="17.2978%" y="991.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (381 samples, 79.21%)</title><rect x="17.0478%" y="965" width="79.2100%" height="15" fill="rgb(212,155,18)" fg:x="82" fg:w="381"/><text x="17.2978%" y="975.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (381 samples, 79.21%)</title><rect x="17.0478%" y="949" width="79.2100%" height="15" fill="rgb(242,21,14)" fg:x="82" fg:w="381"/><text x="17.2978%" y="959.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (381 samples, 79.21%)</title><rect x="17.0478%" y="933" width="79.2100%" height="15" fill="rgb(222,19,48)" fg:x="82" fg:w="381"/><text x="17.2978%" y="943.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (9 samples, 1.87%)</title><rect x="94.3867%" y="917" width="1.8711%" height="15" fill="rgb(232,45,27)" fg:x="454" fg:w="9"/><text x="94.6367%" y="927.50">s..</text></g><g><title>__pthread_getattr_np (9 samples, 1.87%)</title><rect x="94.3867%" y="901" width="1.8711%" height="15" fill="rgb(249,103,42)" fg:x="454" fg:w="9"/><text x="94.6367%" y="911.50">_..</text></g><g><title>__GI___pthread_getaffinity_np (1 samples, 0.21%)</title><rect x="96.0499%" y="885" width="0.2079%" height="15" fill="rgb(246,81,33)" fg:x="462" fg:w="1"/><text x="96.2999%" y="895.50"></text></g><g><title>[libc.so.6] (1 samples, 0.21%)</title><rect x="96.0499%" y="869" width="0.2079%" height="15" fill="rgb(252,33,42)" fg:x="462" fg:w="1"/><text x="96.2999%" y="879.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (1 samples, 0.21%)</title><rect x="96.2578%" y="981" width="0.2079%" height="15" fill="rgb(209,212,41)" fg:x="463" fg:w="1"/><text x="96.5078%" y="991.50"></text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (1 samples, 0.21%)</title><rect x="96.2578%" y="965" width="0.2079%" height="15" fill="rgb(207,154,6)" fg:x="463" fg:w="1"/><text x="96.5078%" y="975.50"></text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (1 samples, 0.21%)</title><rect x="96.2578%" y="949" width="0.2079%" height="15" fill="rgb(223,64,47)" fg:x="463" fg:w="1"/><text x="96.5078%" y="959.50"></text></g><g><title>std::sys::unix::os::page_size (1 samples, 0.21%)</title><rect x="96.2578%" y="933" width="0.2079%" height="15" fill="rgb(211,161,38)" fg:x="463" fg:w="1"/><text x="96.5078%" y="943.50"></text></g><g><title>__GI___sysconf (1 samples, 0.21%)</title><rect x="96.2578%" y="917" width="0.2079%" height="15" fill="rgb(219,138,40)" fg:x="463" fg:w="1"/><text x="96.5078%" y="927.50"></text></g><g><title>__GI___sigaltstack (1 samples, 0.21%)</title><rect x="96.4657%" y="949" width="0.2079%" height="15" fill="rgb(241,228,46)" fg:x="464" fg:w="1"/><text x="96.7157%" y="959.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="96.4657%" y="933" width="0.2079%" height="15" fill="rgb(223,209,38)" fg:x="464" fg:w="1"/><text x="96.7157%" y="943.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="96.4657%" y="917" width="0.2079%" height="15" fill="rgb(236,164,45)" fg:x="464" fg:w="1"/><text x="96.7157%" y="927.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="96.4657%" y="901" width="0.2079%" height="15" fill="rgb(231,15,5)" fg:x="464" fg:w="1"/><text x="96.7157%" y="911.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="96.4657%" y="885" width="0.2079%" height="15" fill="rgb(252,35,15)" fg:x="464" fg:w="1"/><text x="96.7157%" y="895.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="96.4657%" y="869" width="0.2079%" height="15" fill="rgb(248,181,18)" fg:x="464" fg:w="1"/><text x="96.7157%" y="879.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="96.4657%" y="853" width="0.2079%" height="15" fill="rgb(233,39,42)" fg:x="464" fg:w="1"/><text x="96.7157%" y="863.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="96.4657%" y="837" width="0.2079%" height="15" fill="rgb(238,110,33)" fg:x="464" fg:w="1"/><text x="96.7157%" y="847.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.42%)</title><rect x="96.6736%" y="917" width="0.4158%" height="15" fill="rgb(233,195,10)" fg:x="465" fg:w="2"/><text x="96.9236%" y="927.50"></text></g><g><title>__GI___mmap64 (2 samples, 0.42%)</title><rect x="96.6736%" y="901" width="0.4158%" height="15" fill="rgb(254,105,3)" fg:x="465" fg:w="2"/><text x="96.9236%" y="911.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="885" width="0.4158%" height="15" fill="rgb(221,225,9)" fg:x="465" fg:w="2"/><text x="96.9236%" y="895.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="869" width="0.4158%" height="15" fill="rgb(224,227,45)" fg:x="465" fg:w="2"/><text x="96.9236%" y="879.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="853" width="0.4158%" height="15" fill="rgb(229,198,43)" fg:x="465" fg:w="2"/><text x="96.9236%" y="863.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="837" width="0.4158%" height="15" fill="rgb(206,209,35)" fg:x="465" fg:w="2"/><text x="96.9236%" y="847.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="821" width="0.4158%" height="15" fill="rgb(245,195,53)" fg:x="465" fg:w="2"/><text x="96.9236%" y="831.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="805" width="0.4158%" height="15" fill="rgb(240,92,26)" fg:x="465" fg:w="2"/><text x="96.9236%" y="815.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="789" width="0.4158%" height="15" fill="rgb(207,40,23)" fg:x="465" fg:w="2"/><text x="96.9236%" y="799.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="773" width="0.4158%" height="15" fill="rgb(223,111,35)" fg:x="465" fg:w="2"/><text x="96.9236%" y="783.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="757" width="0.4158%" height="15" fill="rgb(229,147,28)" fg:x="465" fg:w="2"/><text x="96.9236%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="96.6736%" y="741" width="0.4158%" height="15" fill="rgb(211,29,28)" fg:x="465" fg:w="2"/><text x="96.9236%" y="751.50"></text></g><g><title>__clone3 (394 samples, 81.91%)</title><rect x="16.8399%" y="1029" width="81.9127%" height="15" fill="rgb(228,72,33)" fg:x="81" fg:w="394"/><text x="17.0899%" y="1039.50">__clone3</text></g><g><title>start_thread (394 samples, 81.91%)</title><rect x="16.8399%" y="1013" width="81.9127%" height="15" fill="rgb(205,214,31)" fg:x="81" fg:w="394"/><text x="17.0899%" y="1023.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (393 samples, 81.70%)</title><rect x="17.0478%" y="997" width="81.7048%" height="15" fill="rgb(224,111,15)" fg:x="82" fg:w="393"/><text x="17.2978%" y="1007.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (11 samples, 2.29%)</title><rect x="96.4657%" y="981" width="2.2869%" height="15" fill="rgb(253,21,26)" fg:x="464" fg:w="11"/><text x="96.7157%" y="991.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (11 samples, 2.29%)</title><rect x="96.4657%" y="965" width="2.2869%" height="15" fill="rgb(245,139,43)" fg:x="464" fg:w="11"/><text x="96.7157%" y="975.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (10 samples, 2.08%)</title><rect x="96.6736%" y="949" width="2.0790%" height="15" fill="rgb(252,170,7)" fg:x="465" fg:w="10"/><text x="96.9236%" y="959.50">s..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (10 samples, 2.08%)</title><rect x="96.6736%" y="933" width="2.0790%" height="15" fill="rgb(231,118,14)" fg:x="465" fg:w="10"/><text x="96.9236%" y="943.50">s..</text></g><g><title>__GI___mprotect (8 samples, 1.66%)</title><rect x="97.0894%" y="917" width="1.6632%" height="15" fill="rgb(238,83,0)" fg:x="467" fg:w="8"/><text x="97.3394%" y="927.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="901" width="1.6632%" height="15" fill="rgb(221,39,39)" fg:x="467" fg:w="8"/><text x="97.3394%" y="911.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="885" width="1.6632%" height="15" fill="rgb(222,119,46)" fg:x="467" fg:w="8"/><text x="97.3394%" y="895.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="869" width="1.6632%" height="15" fill="rgb(222,165,49)" fg:x="467" fg:w="8"/><text x="97.3394%" y="879.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="853" width="1.6632%" height="15" fill="rgb(219,113,52)" fg:x="467" fg:w="8"/><text x="97.3394%" y="863.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="837" width="1.6632%" height="15" fill="rgb(214,7,15)" fg:x="467" fg:w="8"/><text x="97.3394%" y="847.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="821" width="1.6632%" height="15" fill="rgb(235,32,4)" fg:x="467" fg:w="8"/><text x="97.3394%" y="831.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="805" width="1.6632%" height="15" fill="rgb(238,90,54)" fg:x="467" fg:w="8"/><text x="97.3394%" y="815.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="789" width="1.6632%" height="15" fill="rgb(213,208,19)" fg:x="467" fg:w="8"/><text x="97.3394%" y="799.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="773" width="1.6632%" height="15" fill="rgb(233,156,4)" fg:x="467" fg:w="8"/><text x="97.3394%" y="783.50"></text></g><g><title>[unknown] (8 samples, 1.66%)</title><rect x="97.0894%" y="757" width="1.6632%" height="15" fill="rgb(207,194,5)" fg:x="467" fg:w="8"/><text x="97.3394%" y="767.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="98.3368%" y="741" width="0.4158%" height="15" fill="rgb(206,111,30)" fg:x="473" fg:w="2"/><text x="98.5868%" y="751.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="98.3368%" y="725" width="0.4158%" height="15" fill="rgb(243,70,54)" fg:x="473" fg:w="2"/><text x="98.5868%" y="735.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="98.3368%" y="709" width="0.4158%" height="15" fill="rgb(242,28,8)" fg:x="473" fg:w="2"/><text x="98.5868%" y="719.50"></text></g><g><title>[unknown] (2 samples, 0.42%)</title><rect x="98.3368%" y="693" width="0.4158%" height="15" fill="rgb(219,106,18)" fg:x="473" fg:w="2"/><text x="98.5868%" y="703.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="98.5447%" y="677" width="0.2079%" height="15" fill="rgb(244,222,10)" fg:x="474" fg:w="1"/><text x="98.7947%" y="687.50"></text></g><g><title>[unknown] (1 samples, 0.21%)</title><rect x="98.5447%" y="661" width="0.2079%" height="15" fill="rgb(236,179,52)" fg:x="474" fg:w="1"/><text x="98.7947%" y="671.50"></text></g><g><title>lab4 (476 samples, 98.96%)</title><rect x="0.0000%" y="1045" width="98.9605%" height="15" fill="rgb(213,23,39)" fg:x="0" fg:w="476"/><text x="0.2500%" y="1055.50">lab4</text></g><g><title>_start (1 samples, 0.21%)</title><rect x="98.7526%" y="1029" width="0.2079%" height="15" fill="rgb(238,48,10)" fg:x="475" fg:w="1"/><text x="99.0026%" y="1039.50"></text></g><g><title>_dl_start (1 samples, 0.21%)</title><rect x="98.7526%" y="1013" width="0.2079%" height="15" fill="rgb(251,196,23)" fg:x="475" fg:w="1"/><text x="99.0026%" y="1023.50"></text></g><g><title>_dl_start_final (1 samples, 0.21%)</title><rect x="98.7526%" y="997" width="0.2079%" height="15" fill="rgb(250,152,24)" fg:x="475" fg:w="1"/><text x="99.0026%" y="1007.50"></text></g><g><title>_dl_sysdep_start (1 samples, 0.21%)</title><rect x="98.7526%" y="981" width="0.2079%" height="15" fill="rgb(209,150,17)" fg:x="475" fg:w="1"/><text x="99.0026%" y="991.50"></text></g><g><title>dl_main (1 samples, 0.21%)</title><rect x="98.7526%" y="965" width="0.2079%" height="15" fill="rgb(234,202,34)" fg:x="475" fg:w="1"/><text x="99.0026%" y="975.50"></text></g><g><title>_dl_relocate_object (1 samples, 0.21%)</title><rect x="98.7526%" y="949" width="0.2079%" height="15" fill="rgb(253,148,53)" fg:x="475" fg:w="1"/><text x="99.0026%" y="959.50"></text></g><g><title>elf_dynamic_do_Rela (1 samples, 0.21%)</title><rect x="98.7526%" y="933" width="0.2079%" height="15" fill="rgb(218,129,16)" fg:x="475" fg:w="1"/><text x="99.0026%" y="943.50"></text></g><g><title>elf_machine_rela_relative (1 samples, 0.21%)</title><rect x="98.7526%" y="917" width="0.2079%" height="15" fill="rgb(216,85,19)" fg:x="475" fg:w="1"/><text x="99.0026%" y="927.50"></text></g><g><title>all (481 samples, 100%)</title><rect x="0.0000%" y="1061" width="100.0000%" height="15" fill="rgb(235,228,7)" fg:x="0" fg:w="481"/><text x="0.2500%" y="1071.50"></text></g><g><title>perf-exec (5 samples, 1.04%)</title><rect x="98.9605%" y="1045" width="1.0395%" height="15" fill="rgb(245,175,0)" fg:x="476" fg:w="5"/><text x="99.2105%" y="1055.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="1029" width="1.0395%" height="15" fill="rgb(208,168,36)" fg:x="476" fg:w="5"/><text x="99.2105%" y="1039.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="1013" width="1.0395%" height="15" fill="rgb(246,171,24)" fg:x="476" fg:w="5"/><text x="99.2105%" y="1023.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="997" width="1.0395%" height="15" fill="rgb(215,142,24)" fg:x="476" fg:w="5"/><text x="99.2105%" y="1007.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="981" width="1.0395%" height="15" fill="rgb(250,187,7)" fg:x="476" fg:w="5"/><text x="99.2105%" y="991.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="965" width="1.0395%" height="15" fill="rgb(228,66,33)" fg:x="476" fg:w="5"/><text x="99.2105%" y="975.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="949" width="1.0395%" height="15" fill="rgb(234,215,21)" fg:x="476" fg:w="5"/><text x="99.2105%" y="959.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="933" width="1.0395%" height="15" fill="rgb(222,191,20)" fg:x="476" fg:w="5"/><text x="99.2105%" y="943.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="917" width="1.0395%" height="15" fill="rgb(245,79,54)" fg:x="476" fg:w="5"/><text x="99.2105%" y="927.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="901" width="1.0395%" height="15" fill="rgb(240,10,37)" fg:x="476" fg:w="5"/><text x="99.2105%" y="911.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="885" width="1.0395%" height="15" fill="rgb(214,192,32)" fg:x="476" fg:w="5"/><text x="99.2105%" y="895.50"></text></g><g><title>[unknown] (5 samples, 1.04%)</title><rect x="98.9605%" y="869" width="1.0395%" height="15" fill="rgb(209,36,54)" fg:x="476" fg:w="5"/><text x="99.2105%" y="879.50"></text></g></svg></svg>