<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="918" onload="init(evt)" viewBox="0 0 1200 918" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="918" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="901.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="901.00"> </text><svg id="frames" x="10" width="1180" total_samples="291"><g><title>[unknown] (103 samples, 35.40%)</title><rect x="0.0000%" y="837" width="35.3952%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="103"/><text x="0.2500%" y="847.50">[unknown]</text></g><g><title>[unknown] (103 samples, 35.40%)</title><rect x="0.0000%" y="821" width="35.3952%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="103"/><text x="0.2500%" y="831.50">[unknown]</text></g><g><title>[unknown] (97 samples, 33.33%)</title><rect x="2.0619%" y="805" width="33.3333%" height="15" fill="rgb(221,193,54)" fg:x="6" fg:w="97"/><text x="2.3119%" y="815.50">[unknown]</text></g><g><title>[unknown] (45 samples, 15.46%)</title><rect x="19.9313%" y="789" width="15.4639%" height="15" fill="rgb(248,212,6)" fg:x="58" fg:w="45"/><text x="20.1813%" y="799.50">[unknown]</text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="33.6770%" y="773" width="1.7182%" height="15" fill="rgb(208,68,35)" fg:x="98" fg:w="5"/><text x="33.9270%" y="783.50"></text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="33.6770%" y="757" width="1.7182%" height="15" fill="rgb(232,128,0)" fg:x="98" fg:w="5"/><text x="33.9270%" y="767.50"></text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="33.6770%" y="741" width="1.7182%" height="15" fill="rgb(207,160,47)" fg:x="98" fg:w="5"/><text x="33.9270%" y="751.50"></text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="33.6770%" y="725" width="1.7182%" height="15" fill="rgb(228,23,34)" fg:x="98" fg:w="5"/><text x="33.9270%" y="735.50"></text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="33.6770%" y="709" width="1.7182%" height="15" fill="rgb(218,30,26)" fg:x="98" fg:w="5"/><text x="33.9270%" y="719.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="34.0206%" y="693" width="1.3746%" height="15" fill="rgb(220,122,19)" fg:x="99" fg:w="4"/><text x="34.2706%" y="703.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="34.0206%" y="677" width="1.3746%" height="15" fill="rgb(250,228,42)" fg:x="99" fg:w="4"/><text x="34.2706%" y="687.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="34.7079%" y="661" width="0.6873%" height="15" fill="rgb(240,193,28)" fg:x="101" fg:w="2"/><text x="34.9579%" y="671.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="34.7079%" y="645" width="0.6873%" height="15" fill="rgb(216,20,37)" fg:x="101" fg:w="2"/><text x="34.9579%" y="655.50"></text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="34.7079%" y="629" width="0.6873%" height="15" fill="rgb(206,188,39)" fg:x="101" fg:w="2"/><text x="34.9579%" y="639.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="35.0515%" y="613" width="0.3436%" height="15" fill="rgb(217,207,13)" fg:x="102" fg:w="1"/><text x="35.3015%" y="623.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="35.0515%" y="597" width="0.3436%" height="15" fill="rgb(231,73,38)" fg:x="102" fg:w="1"/><text x="35.3015%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="35.0515%" y="581" width="0.3436%" height="15" fill="rgb(225,20,46)" fg:x="102" fg:w="1"/><text x="35.3015%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="35.0515%" y="565" width="0.3436%" height="15" fill="rgb(210,31,41)" fg:x="102" fg:w="1"/><text x="35.3015%" y="575.50"></text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="821" width="2.0619%" height="15" fill="rgb(221,200,47)" fg:x="103" fg:w="6"/><text x="35.6452%" y="831.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="805" width="2.0619%" height="15" fill="rgb(226,26,5)" fg:x="103" fg:w="6"/><text x="35.6452%" y="815.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="789" width="2.0619%" height="15" fill="rgb(249,33,26)" fg:x="103" fg:w="6"/><text x="35.6452%" y="799.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="773" width="2.0619%" height="15" fill="rgb(235,183,28)" fg:x="103" fg:w="6"/><text x="35.6452%" y="783.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="757" width="2.0619%" height="15" fill="rgb(221,5,38)" fg:x="103" fg:w="6"/><text x="35.6452%" y="767.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="741" width="2.0619%" height="15" fill="rgb(247,18,42)" fg:x="103" fg:w="6"/><text x="35.6452%" y="751.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="725" width="2.0619%" height="15" fill="rgb(241,131,45)" fg:x="103" fg:w="6"/><text x="35.6452%" y="735.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="709" width="2.0619%" height="15" fill="rgb(249,31,29)" fg:x="103" fg:w="6"/><text x="35.6452%" y="719.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="35.3952%" y="693" width="2.0619%" height="15" fill="rgb(225,111,53)" fg:x="103" fg:w="6"/><text x="35.6452%" y="703.50">[..</text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="37.4570%" y="805" width="0.3436%" height="15" fill="rgb(238,160,17)" fg:x="109" fg:w="1"/><text x="37.7070%" y="815.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="37.4570%" y="789" width="0.3436%" height="15" fill="rgb(214,148,48)" fg:x="109" fg:w="1"/><text x="37.7070%" y="799.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="37.4570%" y="773" width="0.3436%" height="15" fill="rgb(232,36,49)" fg:x="109" fg:w="1"/><text x="37.7070%" y="783.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="37.4570%" y="757" width="0.3436%" height="15" fill="rgb(209,103,24)" fg:x="109" fg:w="1"/><text x="37.7070%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="37.4570%" y="741" width="0.3436%" height="15" fill="rgb(229,88,8)" fg:x="109" fg:w="1"/><text x="37.7070%" y="751.50"></text></g><g><title>core::ptr::drop_in_place&lt;lab4::idea::IdeaGenerator&gt; (3 samples, 1.03%)</title><rect x="37.8007%" y="613" width="1.0309%" height="15" fill="rgb(213,181,19)" fg:x="110" fg:w="3"/><text x="38.0507%" y="623.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;(alloc::string::String,alloc::string::String)&gt;&gt; (3 samples, 1.03%)</title><rect x="37.8007%" y="597" width="1.0309%" height="15" fill="rgb(254,191,54)" fg:x="110" fg:w="3"/><text x="38.0507%" y="607.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.03%)</title><rect x="37.8007%" y="581" width="1.0309%" height="15" fill="rgb(241,83,37)" fg:x="110" fg:w="3"/><text x="38.0507%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;[(alloc::string::String,alloc::string::String)]&gt; (3 samples, 1.03%)</title><rect x="37.8007%" y="565" width="1.0309%" height="15" fill="rgb(233,36,39)" fg:x="110" fg:w="3"/><text x="38.0507%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::string::String,alloc::string::String)&gt; (3 samples, 1.03%)</title><rect x="37.8007%" y="549" width="1.0309%" height="15" fill="rgb(226,3,54)" fg:x="110" fg:w="3"/><text x="38.0507%" y="559.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::string::String&gt; (3 samples, 1.03%)</title><rect x="37.8007%" y="533" width="1.0309%" height="15" fill="rgb(245,192,40)" fg:x="110" fg:w="3"/><text x="38.0507%" y="543.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (3 samples, 1.03%)</title><rect x="37.8007%" y="517" width="1.0309%" height="15" fill="rgb(238,167,29)" fg:x="110" fg:w="3"/><text x="38.0507%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (3 samples, 1.03%)</title><rect x="37.8007%" y="501" width="1.0309%" height="15" fill="rgb(232,182,51)" fg:x="110" fg:w="3"/><text x="38.0507%" y="511.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (3 samples, 1.03%)</title><rect x="37.8007%" y="485" width="1.0309%" height="15" fill="rgb(231,60,39)" fg:x="110" fg:w="3"/><text x="38.0507%" y="495.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (3 samples, 1.03%)</title><rect x="37.8007%" y="469" width="1.0309%" height="15" fill="rgb(208,69,12)" fg:x="110" fg:w="3"/><text x="38.0507%" y="479.50"></text></g><g><title>alloc::alloc::dealloc (3 samples, 1.03%)</title><rect x="37.8007%" y="453" width="1.0309%" height="15" fill="rgb(235,93,37)" fg:x="110" fg:w="3"/><text x="38.0507%" y="463.50"></text></g><g><title>__rdl_dealloc (3 samples, 1.03%)</title><rect x="37.8007%" y="437" width="1.0309%" height="15" fill="rgb(213,116,39)" fg:x="110" fg:w="3"/><text x="38.0507%" y="447.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (3 samples, 1.03%)</title><rect x="37.8007%" y="421" width="1.0309%" height="15" fill="rgb(222,207,29)" fg:x="110" fg:w="3"/><text x="38.0507%" y="431.50"></text></g><g><title>__GI___libc_free (3 samples, 1.03%)</title><rect x="37.8007%" y="405" width="1.0309%" height="15" fill="rgb(206,96,30)" fg:x="110" fg:w="3"/><text x="38.0507%" y="415.50"></text></g><g><title>_int_free (3 samples, 1.03%)</title><rect x="37.8007%" y="389" width="1.0309%" height="15" fill="rgb(218,138,4)" fg:x="110" fg:w="3"/><text x="38.0507%" y="399.50"></text></g><g><title>&lt;T as alloc::borrow::ToOwned&gt;::to_owned (6 samples, 2.06%)</title><rect x="38.8316%" y="597" width="2.0619%" height="15" fill="rgb(250,191,14)" fg:x="113" fg:w="6"/><text x="39.0816%" y="607.50">&lt;..</text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (6 samples, 2.06%)</title><rect x="38.8316%" y="581" width="2.0619%" height="15" fill="rgb(239,60,40)" fg:x="113" fg:w="6"/><text x="39.0816%" y="591.50">&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (6 samples, 2.06%)</title><rect x="38.8316%" y="565" width="2.0619%" height="15" fill="rgb(206,27,48)" fg:x="113" fg:w="6"/><text x="39.0816%" y="575.50">&lt;..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (6 samples, 2.06%)</title><rect x="38.8316%" y="549" width="2.0619%" height="15" fill="rgb(225,35,8)" fg:x="113" fg:w="6"/><text x="39.0816%" y="559.50">a..</text></g><g><title>alloc::slice::hack::to_vec (6 samples, 2.06%)</title><rect x="38.8316%" y="533" width="2.0619%" height="15" fill="rgb(250,213,24)" fg:x="113" fg:w="6"/><text x="39.0816%" y="543.50">a..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (6 samples, 2.06%)</title><rect x="38.8316%" y="517" width="2.0619%" height="15" fill="rgb(247,123,22)" fg:x="113" fg:w="6"/><text x="39.0816%" y="527.50">&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (6 samples, 2.06%)</title><rect x="38.8316%" y="501" width="2.0619%" height="15" fill="rgb(231,138,38)" fg:x="113" fg:w="6"/><text x="39.0816%" y="511.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (6 samples, 2.06%)</title><rect x="38.8316%" y="485" width="2.0619%" height="15" fill="rgb(231,145,46)" fg:x="113" fg:w="6"/><text x="39.0816%" y="495.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (6 samples, 2.06%)</title><rect x="38.8316%" y="469" width="2.0619%" height="15" fill="rgb(251,118,11)" fg:x="113" fg:w="6"/><text x="39.0816%" y="479.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (6 samples, 2.06%)</title><rect x="38.8316%" y="453" width="2.0619%" height="15" fill="rgb(217,147,25)" fg:x="113" fg:w="6"/><text x="39.0816%" y="463.50">&lt;..</text></g><g><title>alloc::alloc::Global::alloc_impl (6 samples, 2.06%)</title><rect x="38.8316%" y="437" width="2.0619%" height="15" fill="rgb(247,81,37)" fg:x="113" fg:w="6"/><text x="39.0816%" y="447.50">a..</text></g><g><title>alloc::alloc::alloc (6 samples, 2.06%)</title><rect x="38.8316%" y="421" width="2.0619%" height="15" fill="rgb(209,12,38)" fg:x="113" fg:w="6"/><text x="39.0816%" y="431.50">a..</text></g><g><title>__rdl_alloc (6 samples, 2.06%)</title><rect x="38.8316%" y="405" width="2.0619%" height="15" fill="rgb(227,1,9)" fg:x="113" fg:w="6"/><text x="39.0816%" y="415.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (6 samples, 2.06%)</title><rect x="38.8316%" y="389" width="2.0619%" height="15" fill="rgb(248,47,43)" fg:x="113" fg:w="6"/><text x="39.0816%" y="399.50">s..</text></g><g><title>__GI___libc_malloc (6 samples, 2.06%)</title><rect x="38.8316%" y="373" width="2.0619%" height="15" fill="rgb(221,10,30)" fg:x="113" fg:w="6"/><text x="39.0816%" y="383.50">_..</text></g><g><title>_int_malloc (6 samples, 2.06%)</title><rect x="38.8316%" y="357" width="2.0619%" height="15" fill="rgb(210,229,1)" fg:x="113" fg:w="6"/><text x="39.0816%" y="367.50">_..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="38.8316%" y="341" width="2.0619%" height="15" fill="rgb(222,148,37)" fg:x="113" fg:w="6"/><text x="39.0816%" y="351.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="38.8316%" y="325" width="2.0619%" height="15" fill="rgb(234,67,33)" fg:x="113" fg:w="6"/><text x="39.0816%" y="335.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="38.8316%" y="309" width="2.0619%" height="15" fill="rgb(247,98,35)" fg:x="113" fg:w="6"/><text x="39.0816%" y="319.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="38.8316%" y="293" width="2.0619%" height="15" fill="rgb(247,138,52)" fg:x="113" fg:w="6"/><text x="39.0816%" y="303.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="38.8316%" y="277" width="2.0619%" height="15" fill="rgb(213,79,30)" fg:x="113" fg:w="6"/><text x="39.0816%" y="287.50">[..</text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="40.5498%" y="261" width="0.3436%" height="15" fill="rgb(246,177,23)" fg:x="118" fg:w="1"/><text x="40.7998%" y="271.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="40.5498%" y="245" width="0.3436%" height="15" fill="rgb(230,62,27)" fg:x="118" fg:w="1"/><text x="40.7998%" y="255.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="40.5498%" y="229" width="0.3436%" height="15" fill="rgb(216,154,8)" fg:x="118" fg:w="1"/><text x="40.7998%" y="239.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="40.5498%" y="213" width="0.3436%" height="15" fill="rgb(244,35,45)" fg:x="118" fg:w="1"/><text x="40.7998%" y="223.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="40.5498%" y="197" width="0.3436%" height="15" fill="rgb(251,115,12)" fg:x="118" fg:w="1"/><text x="40.7998%" y="207.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (1 samples, 0.34%)</title><rect x="40.8935%" y="597" width="0.3436%" height="15" fill="rgb(240,54,50)" fg:x="119" fg:w="1"/><text x="41.1435%" y="607.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (1 samples, 0.34%)</title><rect x="40.8935%" y="581" width="0.3436%" height="15" fill="rgb(233,84,52)" fg:x="119" fg:w="1"/><text x="41.1435%" y="591.50"></text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_send (1 samples, 0.34%)</title><rect x="40.8935%" y="565" width="0.3436%" height="15" fill="rgb(207,117,47)" fg:x="119" fg:w="1"/><text x="41.1435%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.34%)</title><rect x="41.2371%" y="581" width="0.3436%" height="15" fill="rgb(249,43,39)" fg:x="120" fg:w="1"/><text x="41.4871%" y="591.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.34%)</title><rect x="41.2371%" y="565" width="0.3436%" height="15" fill="rgb(209,38,44)" fg:x="120" fg:w="1"/><text x="41.4871%" y="575.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.34%)</title><rect x="41.2371%" y="549" width="0.3436%" height="15" fill="rgb(236,212,23)" fg:x="120" fg:w="1"/><text x="41.4871%" y="559.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.34%)</title><rect x="41.2371%" y="533" width="0.3436%" height="15" fill="rgb(242,79,21)" fg:x="120" fg:w="1"/><text x="41.4871%" y="543.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.34%)</title><rect x="41.2371%" y="517" width="0.3436%" height="15" fill="rgb(211,96,35)" fg:x="120" fg:w="1"/><text x="41.4871%" y="527.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.34%)</title><rect x="41.2371%" y="501" width="0.3436%" height="15" fill="rgb(253,215,40)" fg:x="120" fg:w="1"/><text x="41.4871%" y="511.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.34%)</title><rect x="41.2371%" y="485" width="0.3436%" height="15" fill="rgb(211,81,21)" fg:x="120" fg:w="1"/><text x="41.4871%" y="495.50"></text></g><g><title>__GI___libc_free (1 samples, 0.34%)</title><rect x="41.2371%" y="469" width="0.3436%" height="15" fill="rgb(208,190,38)" fg:x="120" fg:w="1"/><text x="41.4871%" y="479.50"></text></g><g><title>_int_free (1 samples, 0.34%)</title><rect x="41.2371%" y="453" width="0.3436%" height="15" fill="rgb(235,213,38)" fg:x="120" fg:w="1"/><text x="41.4871%" y="463.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (7 samples, 2.41%)</title><rect x="41.5808%" y="293" width="2.4055%" height="15" fill="rgb(237,122,38)" fg:x="121" fg:w="7"/><text x="41.8308%" y="303.50">&lt;c..</text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (6 samples, 2.06%)</title><rect x="41.9244%" y="277" width="2.0619%" height="15" fill="rgb(244,218,35)" fg:x="122" fg:w="6"/><text x="42.1744%" y="287.50">c..</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (6 samples, 2.06%)</title><rect x="41.9244%" y="261" width="2.0619%" height="15" fill="rgb(240,68,47)" fg:x="122" fg:w="6"/><text x="42.1744%" y="271.50">&lt;..</text></g><g><title>hex::val (3 samples, 1.03%)</title><rect x="42.9553%" y="245" width="1.0309%" height="15" fill="rgb(210,16,53)" fg:x="125" fg:w="3"/><text x="43.2053%" y="255.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (9 samples, 3.09%)</title><rect x="41.5808%" y="389" width="3.0928%" height="15" fill="rgb(235,124,12)" fg:x="121" fg:w="9"/><text x="41.8308%" y="399.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (9 samples, 3.09%)</title><rect x="41.5808%" y="373" width="3.0928%" height="15" fill="rgb(224,169,11)" fg:x="121" fg:w="9"/><text x="41.8308%" y="383.50">cor..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 3.09%)</title><rect x="41.5808%" y="357" width="3.0928%" height="15" fill="rgb(250,166,2)" fg:x="121" fg:w="9"/><text x="41.8308%" y="367.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 3.09%)</title><rect x="41.5808%" y="341" width="3.0928%" height="15" fill="rgb(242,216,29)" fg:x="121" fg:w="9"/><text x="41.8308%" y="351.50">&lt;co..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (9 samples, 3.09%)</title><rect x="41.5808%" y="325" width="3.0928%" height="15" fill="rgb(230,116,27)" fg:x="121" fg:w="9"/><text x="41.8308%" y="335.50">&lt;co..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (9 samples, 3.09%)</title><rect x="41.5808%" y="309" width="3.0928%" height="15" fill="rgb(228,99,48)" fg:x="121" fg:w="9"/><text x="41.8308%" y="319.50">cor..</text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (2 samples, 0.69%)</title><rect x="43.9863%" y="293" width="0.6873%" height="15" fill="rgb(253,11,6)" fg:x="128" fg:w="2"/><text x="44.2363%" y="303.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (16 samples, 5.50%)</title><rect x="41.5808%" y="421" width="5.4983%" height="15" fill="rgb(247,143,39)" fg:x="121" fg:w="16"/><text x="41.8308%" y="431.50">&lt;alloc:..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (16 samples, 5.50%)</title><rect x="41.5808%" y="405" width="5.4983%" height="15" fill="rgb(236,97,10)" fg:x="121" fg:w="16"/><text x="41.8308%" y="415.50">alloc::..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (7 samples, 2.41%)</title><rect x="44.6735%" y="389" width="2.4055%" height="15" fill="rgb(233,208,19)" fg:x="130" fg:w="7"/><text x="44.9235%" y="399.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (7 samples, 2.41%)</title><rect x="44.6735%" y="373" width="2.4055%" height="15" fill="rgb(216,164,2)" fg:x="130" fg:w="7"/><text x="44.9235%" y="383.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (7 samples, 2.41%)</title><rect x="44.6735%" y="357" width="2.4055%" height="15" fill="rgb(220,129,5)" fg:x="130" fg:w="7"/><text x="44.9235%" y="367.50">al..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (7 samples, 2.41%)</title><rect x="44.6735%" y="341" width="2.4055%" height="15" fill="rgb(242,17,10)" fg:x="130" fg:w="7"/><text x="44.9235%" y="351.50">al..</text></g><g><title>alloc::raw_vec::finish_grow (7 samples, 2.41%)</title><rect x="44.6735%" y="325" width="2.4055%" height="15" fill="rgb(242,107,0)" fg:x="130" fg:w="7"/><text x="44.9235%" y="335.50">al..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (7 samples, 2.41%)</title><rect x="44.6735%" y="309" width="2.4055%" height="15" fill="rgb(251,28,31)" fg:x="130" fg:w="7"/><text x="44.9235%" y="319.50">&lt;a..</text></g><g><title>alloc::alloc::Global::grow_impl (7 samples, 2.41%)</title><rect x="44.6735%" y="293" width="2.4055%" height="15" fill="rgb(233,223,10)" fg:x="130" fg:w="7"/><text x="44.9235%" y="303.50">al..</text></g><g><title>alloc::alloc::realloc (7 samples, 2.41%)</title><rect x="44.6735%" y="277" width="2.4055%" height="15" fill="rgb(215,21,27)" fg:x="130" fg:w="7"/><text x="44.9235%" y="287.50">al..</text></g><g><title>__rdl_realloc (7 samples, 2.41%)</title><rect x="44.6735%" y="261" width="2.4055%" height="15" fill="rgb(232,23,21)" fg:x="130" fg:w="7"/><text x="44.9235%" y="271.50">__..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (7 samples, 2.41%)</title><rect x="44.6735%" y="245" width="2.4055%" height="15" fill="rgb(244,5,23)" fg:x="130" fg:w="7"/><text x="44.9235%" y="255.50">st..</text></g><g><title>__GI___libc_realloc (7 samples, 2.41%)</title><rect x="44.6735%" y="229" width="2.4055%" height="15" fill="rgb(226,81,46)" fg:x="130" fg:w="7"/><text x="44.9235%" y="239.50">__..</text></g><g><title>_int_realloc (6 samples, 2.06%)</title><rect x="45.0172%" y="213" width="2.0619%" height="15" fill="rgb(247,70,30)" fg:x="131" fg:w="6"/><text x="45.2672%" y="223.50">_..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="45.0172%" y="197" width="2.0619%" height="15" fill="rgb(212,68,19)" fg:x="131" fg:w="6"/><text x="45.2672%" y="207.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="45.0172%" y="181" width="2.0619%" height="15" fill="rgb(240,187,13)" fg:x="131" fg:w="6"/><text x="45.2672%" y="191.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="45.0172%" y="165" width="2.0619%" height="15" fill="rgb(223,113,26)" fg:x="131" fg:w="6"/><text x="45.2672%" y="175.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="45.0172%" y="149" width="2.0619%" height="15" fill="rgb(206,192,2)" fg:x="131" fg:w="6"/><text x="45.2672%" y="159.50">[..</text></g><g><title>hex::decode (34 samples, 11.68%)</title><rect x="41.5808%" y="581" width="11.6838%" height="15" fill="rgb(241,108,4)" fg:x="121" fg:w="34"/><text x="41.8308%" y="591.50">hex::decode</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (34 samples, 11.68%)</title><rect x="41.5808%" y="565" width="11.6838%" height="15" fill="rgb(247,173,49)" fg:x="121" fg:w="34"/><text x="41.8308%" y="575.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (34 samples, 11.68%)</title><rect x="41.5808%" y="549" width="11.6838%" height="15" fill="rgb(224,114,35)" fg:x="121" fg:w="34"/><text x="41.8308%" y="559.50">core::iter::trait..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (34 samples, 11.68%)</title><rect x="41.5808%" y="533" width="11.6838%" height="15" fill="rgb(245,159,27)" fg:x="121" fg:w="34"/><text x="41.8308%" y="543.50">&lt;core::result::Re..</text></g><g><title>core::iter::adapters::try_process (34 samples, 11.68%)</title><rect x="41.5808%" y="517" width="11.6838%" height="15" fill="rgb(245,172,44)" fg:x="121" fg:w="34"/><text x="41.8308%" y="527.50">core::iter::adapt..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (34 samples, 11.68%)</title><rect x="41.5808%" y="501" width="11.6838%" height="15" fill="rgb(236,23,11)" fg:x="121" fg:w="34"/><text x="41.8308%" y="511.50">&lt;core::result::Re..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (34 samples, 11.68%)</title><rect x="41.5808%" y="485" width="11.6838%" height="15" fill="rgb(205,117,38)" fg:x="121" fg:w="34"/><text x="41.8308%" y="495.50">core::iter::trait..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (34 samples, 11.68%)</title><rect x="41.5808%" y="469" width="11.6838%" height="15" fill="rgb(237,72,25)" fg:x="121" fg:w="34"/><text x="41.8308%" y="479.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (34 samples, 11.68%)</title><rect x="41.5808%" y="453" width="11.6838%" height="15" fill="rgb(244,70,9)" fg:x="121" fg:w="34"/><text x="41.8308%" y="463.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (34 samples, 11.68%)</title><rect x="41.5808%" y="437" width="11.6838%" height="15" fill="rgb(217,125,39)" fg:x="121" fg:w="34"/><text x="41.8308%" y="447.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (18 samples, 6.19%)</title><rect x="47.0790%" y="421" width="6.1856%" height="15" fill="rgb(235,36,10)" fg:x="137" fg:w="18"/><text x="47.3290%" y="431.50">alloc::v..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (18 samples, 6.19%)</title><rect x="47.0790%" y="405" width="6.1856%" height="15" fill="rgb(251,123,47)" fg:x="137" fg:w="18"/><text x="47.3290%" y="415.50">alloc::v..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (18 samples, 6.19%)</title><rect x="47.0790%" y="389" width="6.1856%" height="15" fill="rgb(221,13,13)" fg:x="137" fg:w="18"/><text x="47.3290%" y="399.50">alloc::r..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (18 samples, 6.19%)</title><rect x="47.0790%" y="373" width="6.1856%" height="15" fill="rgb(238,131,9)" fg:x="137" fg:w="18"/><text x="47.3290%" y="383.50">alloc::r..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (18 samples, 6.19%)</title><rect x="47.0790%" y="357" width="6.1856%" height="15" fill="rgb(211,50,8)" fg:x="137" fg:w="18"/><text x="47.3290%" y="367.50">&lt;alloc::..</text></g><g><title>alloc::alloc::Global::alloc_impl (18 samples, 6.19%)</title><rect x="47.0790%" y="341" width="6.1856%" height="15" fill="rgb(245,182,24)" fg:x="137" fg:w="18"/><text x="47.3290%" y="351.50">alloc::a..</text></g><g><title>alloc::alloc::alloc (18 samples, 6.19%)</title><rect x="47.0790%" y="325" width="6.1856%" height="15" fill="rgb(242,14,37)" fg:x="137" fg:w="18"/><text x="47.3290%" y="335.50">alloc::a..</text></g><g><title>__rdl_alloc (18 samples, 6.19%)</title><rect x="47.0790%" y="309" width="6.1856%" height="15" fill="rgb(246,228,12)" fg:x="137" fg:w="18"/><text x="47.3290%" y="319.50">__rdl_al..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (18 samples, 6.19%)</title><rect x="47.0790%" y="293" width="6.1856%" height="15" fill="rgb(213,55,15)" fg:x="137" fg:w="18"/><text x="47.3290%" y="303.50">std::sys..</text></g><g><title>__GI___libc_malloc (18 samples, 6.19%)</title><rect x="47.0790%" y="277" width="6.1856%" height="15" fill="rgb(209,9,3)" fg:x="137" fg:w="18"/><text x="47.3290%" y="287.50">__GI___l..</text></g><g><title>_int_malloc (18 samples, 6.19%)</title><rect x="47.0790%" y="261" width="6.1856%" height="15" fill="rgb(230,59,30)" fg:x="137" fg:w="18"/><text x="47.3290%" y="271.50">_int_mal..</text></g><g><title>[unknown] (18 samples, 6.19%)</title><rect x="47.0790%" y="245" width="6.1856%" height="15" fill="rgb(209,121,21)" fg:x="137" fg:w="18"/><text x="47.3290%" y="255.50">[unknown]</text></g><g><title>[unknown] (18 samples, 6.19%)</title><rect x="47.0790%" y="229" width="6.1856%" height="15" fill="rgb(220,109,13)" fg:x="137" fg:w="18"/><text x="47.3290%" y="239.50">[unknown]</text></g><g><title>[unknown] (18 samples, 6.19%)</title><rect x="47.0790%" y="213" width="6.1856%" height="15" fill="rgb(232,18,1)" fg:x="137" fg:w="18"/><text x="47.3290%" y="223.50">[unknown]</text></g><g><title>[unknown] (18 samples, 6.19%)</title><rect x="47.0790%" y="197" width="6.1856%" height="15" fill="rgb(215,41,42)" fg:x="137" fg:w="18"/><text x="47.3290%" y="207.50">[unknown]</text></g><g><title>[unknown] (12 samples, 4.12%)</title><rect x="49.1409%" y="181" width="4.1237%" height="15" fill="rgb(224,123,36)" fg:x="143" fg:w="12"/><text x="49.3909%" y="191.50">[unk..</text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="52.9210%" y="165" width="0.3436%" height="15" fill="rgb(240,125,3)" fg:x="154" fg:w="1"/><text x="53.1710%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="52.9210%" y="149" width="0.3436%" height="15" fill="rgb(205,98,50)" fg:x="154" fg:w="1"/><text x="53.1710%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="52.9210%" y="133" width="0.3436%" height="15" fill="rgb(205,185,37)" fg:x="154" fg:w="1"/><text x="53.1710%" y="143.50"></text></g><g><title>lab4::checksum::Checksum::update (36 samples, 12.37%)</title><rect x="41.2371%" y="597" width="12.3711%" height="15" fill="rgb(238,207,15)" fg:x="120" fg:w="36"/><text x="41.4871%" y="607.50">lab4::checksum::Ch..</text></g><g><title>hex::encode (1 samples, 0.34%)</title><rect x="53.2646%" y="581" width="0.3436%" height="15" fill="rgb(213,199,42)" fg:x="155" fg:w="1"/><text x="53.5146%" y="591.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (1 samples, 0.34%)</title><rect x="53.2646%" y="565" width="0.3436%" height="15" fill="rgb(235,201,11)" fg:x="155" fg:w="1"/><text x="53.5146%" y="575.50"></text></g><g><title>hex::encode_to_iter (1 samples, 0.34%)</title><rect x="53.2646%" y="549" width="0.3436%" height="15" fill="rgb(207,46,11)" fg:x="155" fg:w="1"/><text x="53.5146%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.34%)</title><rect x="53.2646%" y="533" width="0.3436%" height="15" fill="rgb(241,35,35)" fg:x="155" fg:w="1"/><text x="53.5146%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="53.2646%" y="517" width="0.3436%" height="15" fill="rgb(243,32,47)" fg:x="155" fg:w="1"/><text x="53.5146%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.34%)</title><rect x="53.2646%" y="501" width="0.3436%" height="15" fill="rgb(247,202,23)" fg:x="155" fg:w="1"/><text x="53.5146%" y="511.50"></text></g><g><title>alloc::string::String::reserve (1 samples, 0.34%)</title><rect x="53.2646%" y="485" width="0.3436%" height="15" fill="rgb(219,102,11)" fg:x="155" fg:w="1"/><text x="53.5146%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.34%)</title><rect x="53.2646%" y="469" width="0.3436%" height="15" fill="rgb(243,110,44)" fg:x="155" fg:w="1"/><text x="53.5146%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.34%)</title><rect x="53.2646%" y="453" width="0.3436%" height="15" fill="rgb(222,74,54)" fg:x="155" fg:w="1"/><text x="53.5146%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.34%)</title><rect x="53.2646%" y="437" width="0.3436%" height="15" fill="rgb(216,99,12)" fg:x="155" fg:w="1"/><text x="53.5146%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.34%)</title><rect x="53.2646%" y="421" width="0.3436%" height="15" fill="rgb(226,22,26)" fg:x="155" fg:w="1"/><text x="53.5146%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.34%)</title><rect x="53.2646%" y="405" width="0.3436%" height="15" fill="rgb(217,163,10)" fg:x="155" fg:w="1"/><text x="53.5146%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.34%)</title><rect x="53.2646%" y="389" width="0.3436%" height="15" fill="rgb(213,25,53)" fg:x="155" fg:w="1"/><text x="53.5146%" y="399.50"></text></g><g><title>lab4::package::PackageDownloader::run (44 samples, 15.12%)</title><rect x="38.8316%" y="613" width="15.1203%" height="15" fill="rgb(252,105,26)" fg:x="113" fg:w="44"/><text x="39.0816%" y="623.50">lab4::package::PackageD..</text></g><g><title>lab4::checksum::Checksum::with_sha256 (1 samples, 0.34%)</title><rect x="53.6082%" y="597" width="0.3436%" height="15" fill="rgb(220,39,43)" fg:x="156" fg:w="1"/><text x="53.8582%" y="607.50"></text></g><g><title>hex::encode (1 samples, 0.34%)</title><rect x="53.6082%" y="581" width="0.3436%" height="15" fill="rgb(229,68,48)" fg:x="156" fg:w="1"/><text x="53.8582%" y="591.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (1 samples, 0.34%)</title><rect x="53.6082%" y="565" width="0.3436%" height="15" fill="rgb(252,8,32)" fg:x="156" fg:w="1"/><text x="53.8582%" y="575.50"></text></g><g><title>hex::encode_to_iter (1 samples, 0.34%)</title><rect x="53.6082%" y="549" width="0.3436%" height="15" fill="rgb(223,20,43)" fg:x="156" fg:w="1"/><text x="53.8582%" y="559.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.34%)</title><rect x="53.6082%" y="533" width="0.3436%" height="15" fill="rgb(229,81,49)" fg:x="156" fg:w="1"/><text x="53.8582%" y="543.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="53.6082%" y="517" width="0.3436%" height="15" fill="rgb(236,28,36)" fg:x="156" fg:w="1"/><text x="53.8582%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (1 samples, 0.34%)</title><rect x="53.6082%" y="501" width="0.3436%" height="15" fill="rgb(249,185,26)" fg:x="156" fg:w="1"/><text x="53.8582%" y="511.50"></text></g><g><title>alloc::string::String::reserve (1 samples, 0.34%)</title><rect x="53.6082%" y="485" width="0.3436%" height="15" fill="rgb(249,174,33)" fg:x="156" fg:w="1"/><text x="53.8582%" y="495.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (1 samples, 0.34%)</title><rect x="53.6082%" y="469" width="0.3436%" height="15" fill="rgb(233,201,37)" fg:x="156" fg:w="1"/><text x="53.8582%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (1 samples, 0.34%)</title><rect x="53.6082%" y="453" width="0.3436%" height="15" fill="rgb(221,78,26)" fg:x="156" fg:w="1"/><text x="53.8582%" y="463.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (1 samples, 0.34%)</title><rect x="53.6082%" y="437" width="0.3436%" height="15" fill="rgb(250,127,30)" fg:x="156" fg:w="1"/><text x="53.8582%" y="447.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (1 samples, 0.34%)</title><rect x="53.6082%" y="421" width="0.3436%" height="15" fill="rgb(230,49,44)" fg:x="156" fg:w="1"/><text x="53.8582%" y="431.50"></text></g><g><title>alloc::raw_vec::finish_grow (1 samples, 0.34%)</title><rect x="53.6082%" y="405" width="0.3436%" height="15" fill="rgb(229,67,23)" fg:x="156" fg:w="1"/><text x="53.8582%" y="415.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.34%)</title><rect x="53.6082%" y="389" width="0.3436%" height="15" fill="rgb(249,83,47)" fg:x="156" fg:w="1"/><text x="53.8582%" y="399.50"></text></g><g><title>_int_malloc (1 samples, 0.34%)</title><rect x="53.6082%" y="373" width="0.3436%" height="15" fill="rgb(215,43,3)" fg:x="156" fg:w="1"/><text x="53.8582%" y="383.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (6 samples, 2.06%)</title><rect x="53.9519%" y="597" width="2.0619%" height="15" fill="rgb(238,154,13)" fg:x="157" fg:w="6"/><text x="54.2019%" y="607.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (6 samples, 2.06%)</title><rect x="53.9519%" y="581" width="2.0619%" height="15" fill="rgb(219,56,2)" fg:x="157" fg:w="6"/><text x="54.2019%" y="591.50">a..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (6 samples, 2.06%)</title><rect x="53.9519%" y="565" width="2.0619%" height="15" fill="rgb(233,0,4)" fg:x="157" fg:w="6"/><text x="54.2019%" y="575.50">a..</text></g><g><title>alloc::raw_vec::finish_grow (6 samples, 2.06%)</title><rect x="53.9519%" y="549" width="2.0619%" height="15" fill="rgb(235,30,7)" fg:x="157" fg:w="6"/><text x="54.2019%" y="559.50">a..</text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (6 samples, 2.06%)</title><rect x="53.9519%" y="533" width="2.0619%" height="15" fill="rgb(250,79,13)" fg:x="157" fg:w="6"/><text x="54.2019%" y="543.50">&lt;..</text></g><g><title>alloc::alloc::Global::grow_impl (6 samples, 2.06%)</title><rect x="53.9519%" y="517" width="2.0619%" height="15" fill="rgb(211,146,34)" fg:x="157" fg:w="6"/><text x="54.2019%" y="527.50">a..</text></g><g><title>alloc::alloc::realloc (6 samples, 2.06%)</title><rect x="53.9519%" y="501" width="2.0619%" height="15" fill="rgb(228,22,38)" fg:x="157" fg:w="6"/><text x="54.2019%" y="511.50">a..</text></g><g><title>__rdl_realloc (6 samples, 2.06%)</title><rect x="53.9519%" y="485" width="2.0619%" height="15" fill="rgb(235,168,5)" fg:x="157" fg:w="6"/><text x="54.2019%" y="495.50">_..</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (6 samples, 2.06%)</title><rect x="53.9519%" y="469" width="2.0619%" height="15" fill="rgb(221,155,16)" fg:x="157" fg:w="6"/><text x="54.2019%" y="479.50">s..</text></g><g><title>__GI___libc_realloc (6 samples, 2.06%)</title><rect x="53.9519%" y="453" width="2.0619%" height="15" fill="rgb(215,215,53)" fg:x="157" fg:w="6"/><text x="54.2019%" y="463.50">_..</text></g><g><title>_int_realloc (6 samples, 2.06%)</title><rect x="53.9519%" y="437" width="2.0619%" height="15" fill="rgb(223,4,10)" fg:x="157" fg:w="6"/><text x="54.2019%" y="447.50">_..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="53.9519%" y="421" width="2.0619%" height="15" fill="rgb(234,103,6)" fg:x="157" fg:w="6"/><text x="54.2019%" y="431.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="53.9519%" y="405" width="2.0619%" height="15" fill="rgb(227,97,0)" fg:x="157" fg:w="6"/><text x="54.2019%" y="415.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="53.9519%" y="389" width="2.0619%" height="15" fill="rgb(234,150,53)" fg:x="157" fg:w="6"/><text x="54.2019%" y="399.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="53.9519%" y="373" width="2.0619%" height="15" fill="rgb(228,201,54)" fg:x="157" fg:w="6"/><text x="54.2019%" y="383.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="53.9519%" y="357" width="2.0619%" height="15" fill="rgb(222,22,37)" fg:x="157" fg:w="6"/><text x="54.2019%" y="367.50">[..</text></g><g><title>core::sync::atomic::AtomicUsize::load (1 samples, 0.34%)</title><rect x="56.7010%" y="549" width="0.3436%" height="15" fill="rgb(237,53,32)" fg:x="165" fg:w="1"/><text x="56.9510%" y="559.50"></text></g><g><title>core::sync::atomic::atomic_load (1 samples, 0.34%)</title><rect x="56.7010%" y="533" width="0.3436%" height="15" fill="rgb(233,25,53)" fg:x="165" fg:w="1"/><text x="56.9510%" y="543.50"></text></g><g><title>crossbeam_channel::channel::Receiver&lt;T&gt;::recv (9 samples, 3.09%)</title><rect x="56.0137%" y="597" width="3.0928%" height="15" fill="rgb(210,40,34)" fg:x="163" fg:w="9"/><text x="56.2637%" y="607.50">cro..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::recv (9 samples, 3.09%)</title><rect x="56.0137%" y="581" width="3.0928%" height="15" fill="rgb(241,220,44)" fg:x="163" fg:w="9"/><text x="56.2637%" y="591.50">cro..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_recv (9 samples, 3.09%)</title><rect x="56.0137%" y="565" width="3.0928%" height="15" fill="rgb(235,28,35)" fg:x="163" fg:w="9"/><text x="56.2637%" y="575.50">cro..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (6 samples, 2.06%)</title><rect x="57.0447%" y="549" width="2.0619%" height="15" fill="rgb(210,56,17)" fg:x="166" fg:w="6"/><text x="57.2947%" y="559.50">c..</text></g><g><title>std::thread::yield_now (6 samples, 2.06%)</title><rect x="57.0447%" y="533" width="2.0619%" height="15" fill="rgb(224,130,29)" fg:x="166" fg:w="6"/><text x="57.2947%" y="543.50">s..</text></g><g><title>std::sys::unix::thread::Thread::yield_now (6 samples, 2.06%)</title><rect x="57.0447%" y="517" width="2.0619%" height="15" fill="rgb(235,212,8)" fg:x="166" fg:w="6"/><text x="57.2947%" y="527.50">s..</text></g><g><title>__GI___sched_yield (6 samples, 2.06%)</title><rect x="57.0447%" y="501" width="2.0619%" height="15" fill="rgb(223,33,50)" fg:x="166" fg:w="6"/><text x="57.2947%" y="511.50">_..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="485" width="2.0619%" height="15" fill="rgb(219,149,13)" fg:x="166" fg:w="6"/><text x="57.2947%" y="495.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="469" width="2.0619%" height="15" fill="rgb(250,156,29)" fg:x="166" fg:w="6"/><text x="57.2947%" y="479.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="453" width="2.0619%" height="15" fill="rgb(216,193,19)" fg:x="166" fg:w="6"/><text x="57.2947%" y="463.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="437" width="2.0619%" height="15" fill="rgb(216,135,14)" fg:x="166" fg:w="6"/><text x="57.2947%" y="447.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="421" width="2.0619%" height="15" fill="rgb(241,47,5)" fg:x="166" fg:w="6"/><text x="57.2947%" y="431.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="405" width="2.0619%" height="15" fill="rgb(233,42,35)" fg:x="166" fg:w="6"/><text x="57.2947%" y="415.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="389" width="2.0619%" height="15" fill="rgb(231,13,6)" fg:x="166" fg:w="6"/><text x="57.2947%" y="399.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="373" width="2.0619%" height="15" fill="rgb(207,181,40)" fg:x="166" fg:w="6"/><text x="57.2947%" y="383.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="57.0447%" y="357" width="2.0619%" height="15" fill="rgb(254,173,49)" fg:x="166" fg:w="6"/><text x="57.2947%" y="367.50">[..</text></g><g><title>crossbeam_utils::backoff::Backoff::snooze (11 samples, 3.78%)</title><rect x="62.1993%" y="549" width="3.7801%" height="15" fill="rgb(221,1,38)" fg:x="181" fg:w="11"/><text x="62.4493%" y="559.50">cros..</text></g><g><title>std::thread::yield_now (11 samples, 3.78%)</title><rect x="62.1993%" y="533" width="3.7801%" height="15" fill="rgb(206,124,46)" fg:x="181" fg:w="11"/><text x="62.4493%" y="543.50">std:..</text></g><g><title>std::sys::unix::thread::Thread::yield_now (11 samples, 3.78%)</title><rect x="62.1993%" y="517" width="3.7801%" height="15" fill="rgb(249,21,11)" fg:x="181" fg:w="11"/><text x="62.4493%" y="527.50">std:..</text></g><g><title>__GI___sched_yield (11 samples, 3.78%)</title><rect x="62.1993%" y="501" width="3.7801%" height="15" fill="rgb(222,201,40)" fg:x="181" fg:w="11"/><text x="62.4493%" y="511.50">__GI..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="62.1993%" y="485" width="3.7801%" height="15" fill="rgb(235,61,29)" fg:x="181" fg:w="11"/><text x="62.4493%" y="495.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="62.1993%" y="469" width="3.7801%" height="15" fill="rgb(219,207,3)" fg:x="181" fg:w="11"/><text x="62.4493%" y="479.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="62.1993%" y="453" width="3.7801%" height="15" fill="rgb(222,56,46)" fg:x="181" fg:w="11"/><text x="62.4493%" y="463.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="62.1993%" y="437" width="3.7801%" height="15" fill="rgb(239,76,54)" fg:x="181" fg:w="11"/><text x="62.4493%" y="447.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="62.1993%" y="421" width="3.7801%" height="15" fill="rgb(231,124,27)" fg:x="181" fg:w="11"/><text x="62.4493%" y="431.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="62.1993%" y="405" width="3.7801%" height="15" fill="rgb(249,195,6)" fg:x="181" fg:w="11"/><text x="62.4493%" y="415.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="62.1993%" y="389" width="3.7801%" height="15" fill="rgb(237,174,47)" fg:x="181" fg:w="11"/><text x="62.4493%" y="399.50">[unk..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="63.9175%" y="373" width="2.0619%" height="15" fill="rgb(206,201,31)" fg:x="186" fg:w="6"/><text x="64.1675%" y="383.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="63.9175%" y="357" width="2.0619%" height="15" fill="rgb(231,57,52)" fg:x="186" fg:w="6"/><text x="64.1675%" y="367.50">[..</text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="65.6357%" y="341" width="0.3436%" height="15" fill="rgb(248,177,22)" fg:x="191" fg:w="1"/><text x="65.8857%" y="351.50"></text></g><g><title>crossbeam_channel::channel::Sender&lt;T&gt;::send (21 samples, 7.22%)</title><rect x="59.1065%" y="597" width="7.2165%" height="15" fill="rgb(215,211,37)" fg:x="172" fg:w="21"/><text x="59.3565%" y="607.50">crossbeam_..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::send (19 samples, 6.53%)</title><rect x="59.7938%" y="581" width="6.5292%" height="15" fill="rgb(241,128,51)" fg:x="174" fg:w="19"/><text x="60.0438%" y="591.50">crossbeam..</text></g><g><title>crossbeam_channel::flavors::array::Channel&lt;T&gt;::start_send (19 samples, 6.53%)</title><rect x="59.7938%" y="565" width="6.5292%" height="15" fill="rgb(227,165,31)" fg:x="174" fg:w="19"/><text x="60.0438%" y="575.50">crossbeam..</text></g><g><title>crossbeam_utils::backoff::Backoff::spin (1 samples, 0.34%)</title><rect x="65.9794%" y="549" width="0.3436%" height="15" fill="rgb(228,167,24)" fg:x="192" fg:w="1"/><text x="66.2294%" y="559.50"></text></g><g><title>core::iter::range::&lt;impl core::iter::traits::iterator::Iterator for core::ops::range::Range&lt;A&gt;&gt;::next (1 samples, 0.34%)</title><rect x="65.9794%" y="533" width="0.3436%" height="15" fill="rgb(228,143,12)" fg:x="192" fg:w="1"/><text x="66.2294%" y="543.50"></text></g><g><title>&lt;core::ops::range::Range&lt;T&gt; as core::iter::range::RangeIteratorImpl&gt;::spec_next (1 samples, 0.34%)</title><rect x="65.9794%" y="517" width="0.3436%" height="15" fill="rgb(249,149,8)" fg:x="192" fg:w="1"/><text x="66.2294%" y="527.50"></text></g><g><title>core::cmp::impls::&lt;impl core::cmp::PartialOrd for i32&gt;::lt (1 samples, 0.34%)</title><rect x="65.9794%" y="501" width="0.3436%" height="15" fill="rgb(243,35,44)" fg:x="192" fg:w="1"/><text x="66.2294%" y="511.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.34%)</title><rect x="66.3230%" y="581" width="0.3436%" height="15" fill="rgb(246,89,9)" fg:x="193" fg:w="1"/><text x="66.5730%" y="591.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="66.3230%" y="565" width="0.3436%" height="15" fill="rgb(233,213,13)" fg:x="193" fg:w="1"/><text x="66.5730%" y="575.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="66.3230%" y="549" width="0.3436%" height="15" fill="rgb(233,141,41)" fg:x="193" fg:w="1"/><text x="66.5730%" y="559.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="66.3230%" y="533" width="0.3436%" height="15" fill="rgb(239,167,4)" fg:x="193" fg:w="1"/><text x="66.5730%" y="543.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.34%)</title><rect x="66.3230%" y="517" width="0.3436%" height="15" fill="rgb(209,217,16)" fg:x="193" fg:w="1"/><text x="66.5730%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.34%)</title><rect x="66.3230%" y="501" width="0.3436%" height="15" fill="rgb(219,88,35)" fg:x="193" fg:w="1"/><text x="66.5730%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.34%)</title><rect x="66.3230%" y="485" width="0.3436%" height="15" fill="rgb(220,193,23)" fg:x="193" fg:w="1"/><text x="66.5730%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.34%)</title><rect x="66.3230%" y="469" width="0.3436%" height="15" fill="rgb(230,90,52)" fg:x="193" fg:w="1"/><text x="66.5730%" y="479.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.34%)</title><rect x="66.3230%" y="453" width="0.3436%" height="15" fill="rgb(252,106,19)" fg:x="193" fg:w="1"/><text x="66.5730%" y="463.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.34%)</title><rect x="66.3230%" y="437" width="0.3436%" height="15" fill="rgb(206,74,20)" fg:x="193" fg:w="1"/><text x="66.5730%" y="447.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.34%)</title><rect x="66.3230%" y="421" width="0.3436%" height="15" fill="rgb(230,138,44)" fg:x="193" fg:w="1"/><text x="66.5730%" y="431.50"></text></g><g><title>__rdl_alloc (1 samples, 0.34%)</title><rect x="66.3230%" y="405" width="0.3436%" height="15" fill="rgb(235,182,43)" fg:x="193" fg:w="1"/><text x="66.5730%" y="415.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.34%)</title><rect x="66.3230%" y="389" width="0.3436%" height="15" fill="rgb(242,16,51)" fg:x="193" fg:w="1"/><text x="66.5730%" y="399.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.34%)</title><rect x="66.3230%" y="373" width="0.3436%" height="15" fill="rgb(248,9,4)" fg:x="193" fg:w="1"/><text x="66.5730%" y="383.50"></text></g><g><title>_int_malloc (1 samples, 0.34%)</title><rect x="66.3230%" y="357" width="0.3436%" height="15" fill="rgb(210,31,22)" fg:x="193" fg:w="1"/><text x="66.5730%" y="367.50"></text></g><g><title>malloc_consolidate (1 samples, 0.34%)</title><rect x="66.3230%" y="341" width="0.3436%" height="15" fill="rgb(239,54,39)" fg:x="193" fg:w="1"/><text x="66.5730%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (1 samples, 0.34%)</title><rect x="66.6667%" y="565" width="0.3436%" height="15" fill="rgb(230,99,41)" fg:x="194" fg:w="1"/><text x="66.9167%" y="575.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (1 samples, 0.34%)</title><rect x="66.6667%" y="549" width="0.3436%" height="15" fill="rgb(253,106,12)" fg:x="194" fg:w="1"/><text x="66.9167%" y="559.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (1 samples, 0.34%)</title><rect x="66.6667%" y="533" width="0.3436%" height="15" fill="rgb(213,46,41)" fg:x="194" fg:w="1"/><text x="66.9167%" y="543.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (1 samples, 0.34%)</title><rect x="66.6667%" y="517" width="0.3436%" height="15" fill="rgb(215,133,35)" fg:x="194" fg:w="1"/><text x="66.9167%" y="527.50"></text></g><g><title>alloc::alloc::dealloc (1 samples, 0.34%)</title><rect x="66.6667%" y="501" width="0.3436%" height="15" fill="rgb(213,28,5)" fg:x="194" fg:w="1"/><text x="66.9167%" y="511.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.34%)</title><rect x="66.6667%" y="485" width="0.3436%" height="15" fill="rgb(215,77,49)" fg:x="194" fg:w="1"/><text x="66.9167%" y="495.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.34%)</title><rect x="66.6667%" y="469" width="0.3436%" height="15" fill="rgb(248,100,22)" fg:x="194" fg:w="1"/><text x="66.9167%" y="479.50"></text></g><g><title>__GI___libc_free (1 samples, 0.34%)</title><rect x="66.6667%" y="453" width="0.3436%" height="15" fill="rgb(208,67,9)" fg:x="194" fg:w="1"/><text x="66.9167%" y="463.50"></text></g><g><title>_int_free (1 samples, 0.34%)</title><rect x="66.6667%" y="437" width="0.3436%" height="15" fill="rgb(219,133,21)" fg:x="194" fg:w="1"/><text x="66.9167%" y="447.50"></text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold::enumerate::{{closure}} (5 samples, 1.72%)</title><rect x="67.6976%" y="277" width="1.7182%" height="15" fill="rgb(246,46,29)" fg:x="197" fg:w="5"/><text x="67.9476%" y="287.50"></text></g><g><title>core::iter::adapters::map::map_try_fold::{{closure}} (4 samples, 1.37%)</title><rect x="68.0412%" y="261" width="1.3746%" height="15" fill="rgb(246,185,52)" fg:x="198" fg:w="4"/><text x="68.2912%" y="271.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex::{{closure}} (4 samples, 1.37%)</title><rect x="68.0412%" y="245" width="1.3746%" height="15" fill="rgb(252,136,11)" fg:x="198" fg:w="4"/><text x="68.2912%" y="255.50"></text></g><g><title>hex::val (3 samples, 1.03%)</title><rect x="68.3849%" y="229" width="1.0309%" height="15" fill="rgb(219,138,53)" fg:x="199" fg:w="3"/><text x="68.6349%" y="239.50"></text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::next (7 samples, 2.41%)</title><rect x="67.3540%" y="373" width="2.4055%" height="15" fill="rgb(211,51,23)" fg:x="196" fg:w="7"/><text x="67.6040%" y="383.50">&lt;c..</text></g><g><title>core::iter::traits::iterator::Iterator::try_for_each (6 samples, 2.06%)</title><rect x="67.6976%" y="357" width="2.0619%" height="15" fill="rgb(247,221,28)" fg:x="197" fg:w="6"/><text x="67.9476%" y="367.50">c..</text></g><g><title>&lt;core::iter::adapters::GenericShunt&lt;I,R&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 2.06%)</title><rect x="67.6976%" y="341" width="2.0619%" height="15" fill="rgb(251,222,45)" fg:x="197" fg:w="6"/><text x="67.9476%" y="351.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::map::Map&lt;I,F&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 2.06%)</title><rect x="67.6976%" y="325" width="2.0619%" height="15" fill="rgb(217,162,53)" fg:x="197" fg:w="6"/><text x="67.9476%" y="335.50">&lt;..</text></g><g><title>&lt;core::iter::adapters::enumerate::Enumerate&lt;I&gt; as core::iter::traits::iterator::Iterator&gt;::try_fold (6 samples, 2.06%)</title><rect x="67.6976%" y="309" width="2.0619%" height="15" fill="rgb(229,93,14)" fg:x="197" fg:w="6"/><text x="67.9476%" y="319.50">&lt;..</text></g><g><title>core::iter::traits::iterator::Iterator::try_fold (6 samples, 2.06%)</title><rect x="67.6976%" y="293" width="2.0619%" height="15" fill="rgb(209,67,49)" fg:x="197" fg:w="6"/><text x="67.9476%" y="303.50">c..</text></g><g><title>&lt;core::slice::iter::Chunks&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="69.4158%" y="277" width="0.3436%" height="15" fill="rgb(213,87,29)" fg:x="202" fg:w="1"/><text x="69.6658%" y="287.50"></text></g><g><title>__GI___lll_lock_wait_private (22 samples, 7.56%)</title><rect x="70.1031%" y="197" width="7.5601%" height="15" fill="rgb(205,151,52)" fg:x="204" fg:w="22"/><text x="70.3531%" y="207.50">__GI___lll..</text></g><g><title>futex_wait (22 samples, 7.56%)</title><rect x="70.1031%" y="181" width="7.5601%" height="15" fill="rgb(253,215,39)" fg:x="204" fg:w="22"/><text x="70.3531%" y="191.50">futex_wait</text></g><g><title>[unknown] (22 samples, 7.56%)</title><rect x="70.1031%" y="165" width="7.5601%" height="15" fill="rgb(221,220,41)" fg:x="204" fg:w="22"/><text x="70.3531%" y="175.50">[unknown]</text></g><g><title>[unknown] (22 samples, 7.56%)</title><rect x="70.1031%" y="149" width="7.5601%" height="15" fill="rgb(218,133,21)" fg:x="204" fg:w="22"/><text x="70.3531%" y="159.50">[unknown]</text></g><g><title>[unknown] (22 samples, 7.56%)</title><rect x="70.1031%" y="133" width="7.5601%" height="15" fill="rgb(221,193,43)" fg:x="204" fg:w="22"/><text x="70.3531%" y="143.50">[unknown]</text></g><g><title>[unknown] (16 samples, 5.50%)</title><rect x="72.1649%" y="117" width="5.4983%" height="15" fill="rgb(240,128,52)" fg:x="210" fg:w="16"/><text x="72.4149%" y="127.50">[unknow..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="73.8832%" y="101" width="3.7801%" height="15" fill="rgb(253,114,12)" fg:x="215" fg:w="11"/><text x="74.1332%" y="111.50">[unk..</text></g><g><title>[unknown] (11 samples, 3.78%)</title><rect x="73.8832%" y="85" width="3.7801%" height="15" fill="rgb(215,223,47)" fg:x="215" fg:w="11"/><text x="74.1332%" y="95.50">[unk..</text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="77.3196%" y="69" width="0.3436%" height="15" fill="rgb(248,225,23)" fg:x="225" fg:w="1"/><text x="77.5696%" y="79.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="77.3196%" y="53" width="0.3436%" height="15" fill="rgb(250,108,0)" fg:x="225" fg:w="1"/><text x="77.5696%" y="63.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="77.3196%" y="37" width="0.3436%" height="15" fill="rgb(228,208,7)" fg:x="225" fg:w="1"/><text x="77.5696%" y="47.50"></text></g><g><title>__GI___lll_lock_wake_private (1 samples, 0.34%)</title><rect x="77.6632%" y="197" width="0.3436%" height="15" fill="rgb(244,45,10)" fg:x="226" fg:w="1"/><text x="77.9132%" y="207.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="77.6632%" y="181" width="0.3436%" height="15" fill="rgb(207,125,25)" fg:x="226" fg:w="1"/><text x="77.9132%" y="191.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="77.6632%" y="165" width="0.3436%" height="15" fill="rgb(210,195,18)" fg:x="226" fg:w="1"/><text x="77.9132%" y="175.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="77.6632%" y="149" width="0.3436%" height="15" fill="rgb(249,80,12)" fg:x="226" fg:w="1"/><text x="77.9132%" y="159.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="77.6632%" y="133" width="0.3436%" height="15" fill="rgb(221,65,9)" fg:x="226" fg:w="1"/><text x="77.9132%" y="143.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (25 samples, 8.59%)</title><rect x="69.7595%" y="293" width="8.5911%" height="15" fill="rgb(235,49,36)" fg:x="203" fg:w="25"/><text x="70.0095%" y="303.50">&lt;alloc::allo..</text></g><g><title>alloc::alloc::Global::grow_impl (25 samples, 8.59%)</title><rect x="69.7595%" y="277" width="8.5911%" height="15" fill="rgb(225,32,20)" fg:x="203" fg:w="25"/><text x="70.0095%" y="287.50">alloc::alloc..</text></g><g><title>alloc::alloc::realloc (25 samples, 8.59%)</title><rect x="69.7595%" y="261" width="8.5911%" height="15" fill="rgb(215,141,46)" fg:x="203" fg:w="25"/><text x="70.0095%" y="271.50">alloc::alloc..</text></g><g><title>__rdl_realloc (25 samples, 8.59%)</title><rect x="69.7595%" y="245" width="8.5911%" height="15" fill="rgb(250,160,47)" fg:x="203" fg:w="25"/><text x="70.0095%" y="255.50">__rdl_realloc</text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::realloc (25 samples, 8.59%)</title><rect x="69.7595%" y="229" width="8.5911%" height="15" fill="rgb(216,222,40)" fg:x="203" fg:w="25"/><text x="70.0095%" y="239.50">std::sys::un..</text></g><g><title>__GI___libc_realloc (25 samples, 8.59%)</title><rect x="69.7595%" y="213" width="8.5911%" height="15" fill="rgb(234,217,39)" fg:x="203" fg:w="25"/><text x="70.0095%" y="223.50">__GI___libc_..</text></g><g><title>_int_realloc (1 samples, 0.34%)</title><rect x="78.0069%" y="197" width="0.3436%" height="15" fill="rgb(207,178,40)" fg:x="227" fg:w="1"/><text x="78.2569%" y="207.50"></text></g><g><title>_int_malloc (1 samples, 0.34%)</title><rect x="78.0069%" y="181" width="0.3436%" height="15" fill="rgb(221,136,13)" fg:x="227" fg:w="1"/><text x="78.2569%" y="191.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (33 samples, 11.34%)</title><rect x="67.3540%" y="405" width="11.3402%" height="15" fill="rgb(249,199,10)" fg:x="196" fg:w="33"/><text x="67.6040%" y="415.50">&lt;alloc::vec::Vec&lt;..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (33 samples, 11.34%)</title><rect x="67.3540%" y="389" width="11.3402%" height="15" fill="rgb(249,222,13)" fg:x="196" fg:w="33"/><text x="67.6040%" y="399.50">alloc::vec::Vec&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::reserve (26 samples, 8.93%)</title><rect x="69.7595%" y="373" width="8.9347%" height="15" fill="rgb(244,185,38)" fg:x="203" fg:w="26"/><text x="70.0095%" y="383.50">alloc::vec::V..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve (26 samples, 8.93%)</title><rect x="69.7595%" y="357" width="8.9347%" height="15" fill="rgb(236,202,9)" fg:x="203" fg:w="26"/><text x="70.0095%" y="367.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve::do_reserve_and_handle (26 samples, 8.93%)</title><rect x="69.7595%" y="341" width="8.9347%" height="15" fill="rgb(250,229,37)" fg:x="203" fg:w="26"/><text x="70.0095%" y="351.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (26 samples, 8.93%)</title><rect x="69.7595%" y="325" width="8.9347%" height="15" fill="rgb(206,174,23)" fg:x="203" fg:w="26"/><text x="70.0095%" y="335.50">alloc::raw_ve..</text></g><g><title>alloc::raw_vec::finish_grow (26 samples, 8.93%)</title><rect x="69.7595%" y="309" width="8.9347%" height="15" fill="rgb(211,33,43)" fg:x="203" fg:w="26"/><text x="70.0095%" y="319.50">alloc::raw_ve..</text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (1 samples, 0.34%)</title><rect x="78.3505%" y="293" width="0.3436%" height="15" fill="rgb(245,58,50)" fg:x="228" fg:w="1"/><text x="78.6005%" y="303.50"></text></g><g><title>lab4::checksum::Checksum::update (36 samples, 12.37%)</title><rect x="66.6667%" y="581" width="12.3711%" height="15" fill="rgb(244,68,36)" fg:x="194" fg:w="36"/><text x="66.9167%" y="591.50">lab4::checksum::Ch..</text></g><g><title>hex::decode (35 samples, 12.03%)</title><rect x="67.0103%" y="565" width="12.0275%" height="15" fill="rgb(232,229,15)" fg:x="195" fg:w="35"/><text x="67.2603%" y="575.50">hex::decode</text></g><g><title>&lt;alloc::vec::Vec&lt;u8&gt; as hex::FromHex&gt;::from_hex (35 samples, 12.03%)</title><rect x="67.0103%" y="549" width="12.0275%" height="15" fill="rgb(254,30,23)" fg:x="195" fg:w="35"/><text x="67.2603%" y="559.50">&lt;alloc::vec::Vec&lt;u..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (35 samples, 12.03%)</title><rect x="67.0103%" y="533" width="12.0275%" height="15" fill="rgb(235,160,14)" fg:x="195" fg:w="35"/><text x="67.2603%" y="543.50">core::iter::traits..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter (35 samples, 12.03%)</title><rect x="67.0103%" y="517" width="12.0275%" height="15" fill="rgb(212,155,44)" fg:x="195" fg:w="35"/><text x="67.2603%" y="527.50">&lt;core::result::Res..</text></g><g><title>core::iter::adapters::try_process (35 samples, 12.03%)</title><rect x="67.0103%" y="501" width="12.0275%" height="15" fill="rgb(226,2,50)" fg:x="195" fg:w="35"/><text x="67.2603%" y="511.50">core::iter::adapte..</text></g><g><title>&lt;core::result::Result&lt;V,E&gt; as core::iter::traits::collect::FromIterator&lt;core::result::Result&lt;A,E&gt;&gt;&gt;::from_iter::{{closure}} (35 samples, 12.03%)</title><rect x="67.0103%" y="485" width="12.0275%" height="15" fill="rgb(234,177,6)" fg:x="195" fg:w="35"/><text x="67.2603%" y="495.50">&lt;core::result::Res..</text></g><g><title>core::iter::traits::iterator::Iterator::collect (35 samples, 12.03%)</title><rect x="67.0103%" y="469" width="12.0275%" height="15" fill="rgb(217,24,9)" fg:x="195" fg:w="35"/><text x="67.2603%" y="479.50">core::iter::traits..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (35 samples, 12.03%)</title><rect x="67.0103%" y="453" width="12.0275%" height="15" fill="rgb(220,13,46)" fg:x="195" fg:w="35"/><text x="67.2603%" y="463.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (35 samples, 12.03%)</title><rect x="67.0103%" y="437" width="12.0275%" height="15" fill="rgb(239,221,27)" fg:x="195" fg:w="35"/><text x="67.2603%" y="447.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (35 samples, 12.03%)</title><rect x="67.0103%" y="421" width="12.0275%" height="15" fill="rgb(222,198,25)" fg:x="195" fg:w="35"/><text x="67.2603%" y="431.50">&lt;alloc::vec::Vec&lt;T..</text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (1 samples, 0.34%)</title><rect x="78.6942%" y="405" width="0.3436%" height="15" fill="rgb(211,99,13)" fg:x="229" fg:w="1"/><text x="78.9442%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.34%)</title><rect x="78.6942%" y="389" width="0.3436%" height="15" fill="rgb(232,111,31)" fg:x="229" fg:w="1"/><text x="78.9442%" y="399.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.34%)</title><rect x="78.6942%" y="373" width="0.3436%" height="15" fill="rgb(245,82,37)" fg:x="229" fg:w="1"/><text x="78.9442%" y="383.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.34%)</title><rect x="78.6942%" y="357" width="0.3436%" height="15" fill="rgb(227,149,46)" fg:x="229" fg:w="1"/><text x="78.9442%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.34%)</title><rect x="78.6942%" y="341" width="0.3436%" height="15" fill="rgb(218,36,50)" fg:x="229" fg:w="1"/><text x="78.9442%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.34%)</title><rect x="78.6942%" y="325" width="0.3436%" height="15" fill="rgb(226,80,48)" fg:x="229" fg:w="1"/><text x="78.9442%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.34%)</title><rect x="78.6942%" y="309" width="0.3436%" height="15" fill="rgb(238,224,15)" fg:x="229" fg:w="1"/><text x="78.9442%" y="319.50"></text></g><g><title>__rdl_alloc (1 samples, 0.34%)</title><rect x="78.6942%" y="293" width="0.3436%" height="15" fill="rgb(241,136,10)" fg:x="229" fg:w="1"/><text x="78.9442%" y="303.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.34%)</title><rect x="78.6942%" y="277" width="0.3436%" height="15" fill="rgb(208,32,45)" fg:x="229" fg:w="1"/><text x="78.9442%" y="287.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.34%)</title><rect x="78.6942%" y="261" width="0.3436%" height="15" fill="rgb(207,135,9)" fg:x="229" fg:w="1"/><text x="78.9442%" y="271.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.34%)</title><rect x="79.0378%" y="437" width="0.3436%" height="15" fill="rgb(206,86,44)" fg:x="230" fg:w="1"/><text x="79.2878%" y="447.50"></text></g><g><title>core::option::Option&lt;T&gt;::map (1 samples, 0.34%)</title><rect x="79.0378%" y="421" width="0.3436%" height="15" fill="rgb(245,177,15)" fg:x="230" fg:w="1"/><text x="79.2878%" y="431.50"></text></g><g><title>&lt;hex::BytesToHexChars as core::iter::traits::iterator::Iterator&gt;::next::{{closure}} (1 samples, 0.34%)</title><rect x="79.0378%" y="405" width="0.3436%" height="15" fill="rgb(206,64,50)" fg:x="230" fg:w="1"/><text x="79.2878%" y="415.50"></text></g><g><title>std::panic::catch_unwind (122 samples, 41.92%)</title><rect x="37.8007%" y="725" width="41.9244%" height="15" fill="rgb(234,36,40)" fg:x="110" fg:w="122"/><text x="38.0507%" y="735.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (122 samples, 41.92%)</title><rect x="37.8007%" y="709" width="41.9244%" height="15" fill="rgb(213,64,8)" fg:x="110" fg:w="122"/><text x="38.0507%" y="719.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (122 samples, 41.92%)</title><rect x="37.8007%" y="693" width="41.9244%" height="15" fill="rgb(210,75,36)" fg:x="110" fg:w="122"/><text x="38.0507%" y="703.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (122 samples, 41.92%)</title><rect x="37.8007%" y="677" width="41.9244%" height="15" fill="rgb(229,88,21)" fg:x="110" fg:w="122"/><text x="38.0507%" y="687.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function..</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (122 samples, 41.92%)</title><rect x="37.8007%" y="661" width="41.9244%" height="15" fill="rgb(252,204,47)" fg:x="110" fg:w="122"/><text x="38.0507%" y="671.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (122 samples, 41.92%)</title><rect x="37.8007%" y="645" width="41.9244%" height="15" fill="rgb(208,77,27)" fg:x="110" fg:w="122"/><text x="38.0507%" y="655.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>lab4::hackathon::{{closure}} (122 samples, 41.92%)</title><rect x="37.8007%" y="629" width="41.9244%" height="15" fill="rgb(221,76,26)" fg:x="110" fg:w="122"/><text x="38.0507%" y="639.50">lab4::hackathon::{{closure}}</text></g><g><title>lab4::student::Student::run (75 samples, 25.77%)</title><rect x="53.9519%" y="613" width="25.7732%" height="15" fill="rgb(225,139,18)" fg:x="157" fg:w="75"/><text x="54.2019%" y="623.50">lab4::student::Student::run</text></g><g><title>lab4::student::Student::build_idea (39 samples, 13.40%)</title><rect x="66.3230%" y="597" width="13.4021%" height="15" fill="rgb(230,137,11)" fg:x="193" fg:w="39"/><text x="66.5730%" y="607.50">lab4::student::Stude..</text></g><g><title>lab4::checksum::Checksum::with_sha256 (2 samples, 0.69%)</title><rect x="79.0378%" y="581" width="0.6873%" height="15" fill="rgb(212,28,1)" fg:x="230" fg:w="2"/><text x="79.2878%" y="591.50"></text></g><g><title>hex::encode (2 samples, 0.69%)</title><rect x="79.0378%" y="565" width="0.6873%" height="15" fill="rgb(248,164,17)" fg:x="230" fg:w="2"/><text x="79.2878%" y="575.50"></text></g><g><title>&lt;T as hex::ToHex&gt;::encode_hex (2 samples, 0.69%)</title><rect x="79.0378%" y="549" width="0.6873%" height="15" fill="rgb(222,171,42)" fg:x="230" fg:w="2"/><text x="79.2878%" y="559.50"></text></g><g><title>hex::encode_to_iter (2 samples, 0.69%)</title><rect x="79.0378%" y="533" width="0.6873%" height="15" fill="rgb(243,84,45)" fg:x="230" fg:w="2"/><text x="79.2878%" y="543.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (2 samples, 0.69%)</title><rect x="79.0378%" y="517" width="0.6873%" height="15" fill="rgb(252,49,23)" fg:x="230" fg:w="2"/><text x="79.2878%" y="527.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::FromIterator&lt;char&gt;&gt;::from_iter (2 samples, 0.69%)</title><rect x="79.0378%" y="501" width="0.6873%" height="15" fill="rgb(215,19,7)" fg:x="230" fg:w="2"/><text x="79.2878%" y="511.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend (2 samples, 0.69%)</title><rect x="79.0378%" y="485" width="0.6873%" height="15" fill="rgb(238,81,41)" fg:x="230" fg:w="2"/><text x="79.2878%" y="495.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each (2 samples, 0.69%)</title><rect x="79.0378%" y="469" width="0.6873%" height="15" fill="rgb(210,199,37)" fg:x="230" fg:w="2"/><text x="79.2878%" y="479.50"></text></g><g><title>core::iter::traits::iterator::Iterator::fold (2 samples, 0.69%)</title><rect x="79.0378%" y="453" width="0.6873%" height="15" fill="rgb(244,192,49)" fg:x="230" fg:w="2"/><text x="79.2878%" y="463.50"></text></g><g><title>core::iter::traits::iterator::Iterator::for_each::call::{{closure}} (1 samples, 0.34%)</title><rect x="79.3814%" y="437" width="0.3436%" height="15" fill="rgb(226,211,11)" fg:x="231" fg:w="1"/><text x="79.6314%" y="447.50"></text></g><g><title>&lt;alloc::string::String as core::iter::traits::collect::Extend&lt;char&gt;&gt;::extend::{{closure}} (1 samples, 0.34%)</title><rect x="79.3814%" y="421" width="0.3436%" height="15" fill="rgb(236,162,54)" fg:x="231" fg:w="1"/><text x="79.6314%" y="431.50"></text></g><g><title>alloc::string::String::push (1 samples, 0.34%)</title><rect x="79.3814%" y="405" width="0.3436%" height="15" fill="rgb(220,229,9)" fg:x="231" fg:w="1"/><text x="79.6314%" y="415.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (1 samples, 0.34%)</title><rect x="79.3814%" y="389" width="0.3436%" height="15" fill="rgb(250,87,22)" fg:x="231" fg:w="1"/><text x="79.6314%" y="399.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.34%)</title><rect x="79.7251%" y="693" width="0.3436%" height="15" fill="rgb(239,43,17)" fg:x="232" fg:w="1"/><text x="79.9751%" y="703.50"></text></g><g><title>tcache_init (1 samples, 0.34%)</title><rect x="79.7251%" y="677" width="0.3436%" height="15" fill="rgb(231,177,25)" fg:x="232" fg:w="1"/><text x="79.9751%" y="687.50"></text></g><g><title>tcache_init (1 samples, 0.34%)</title><rect x="79.7251%" y="661" width="0.3436%" height="15" fill="rgb(219,179,1)" fg:x="232" fg:w="1"/><text x="79.9751%" y="671.50"></text></g><g><title>arena_get2 (1 samples, 0.34%)</title><rect x="79.7251%" y="645" width="0.3436%" height="15" fill="rgb(238,219,53)" fg:x="232" fg:w="1"/><text x="79.9751%" y="655.50"></text></g><g><title>arena_get2 (1 samples, 0.34%)</title><rect x="79.7251%" y="629" width="0.3436%" height="15" fill="rgb(232,167,36)" fg:x="232" fg:w="1"/><text x="79.9751%" y="639.50"></text></g><g><title>_int_new_arena (1 samples, 0.34%)</title><rect x="79.7251%" y="613" width="0.3436%" height="15" fill="rgb(244,19,51)" fg:x="232" fg:w="1"/><text x="79.9751%" y="623.50"></text></g><g><title>new_heap (1 samples, 0.34%)</title><rect x="79.7251%" y="597" width="0.3436%" height="15" fill="rgb(224,6,22)" fg:x="232" fg:w="1"/><text x="79.9751%" y="607.50"></text></g><g><title>alloc_new_heap (1 samples, 0.34%)</title><rect x="79.7251%" y="581" width="0.3436%" height="15" fill="rgb(224,145,5)" fg:x="232" fg:w="1"/><text x="79.9751%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="565" width="0.3436%" height="15" fill="rgb(234,130,49)" fg:x="232" fg:w="1"/><text x="79.9751%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="549" width="0.3436%" height="15" fill="rgb(254,6,2)" fg:x="232" fg:w="1"/><text x="79.9751%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="533" width="0.3436%" height="15" fill="rgb(208,96,46)" fg:x="232" fg:w="1"/><text x="79.9751%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="517" width="0.3436%" height="15" fill="rgb(239,3,39)" fg:x="232" fg:w="1"/><text x="79.9751%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="501" width="0.3436%" height="15" fill="rgb(233,210,1)" fg:x="232" fg:w="1"/><text x="79.9751%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="485" width="0.3436%" height="15" fill="rgb(244,137,37)" fg:x="232" fg:w="1"/><text x="79.9751%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="469" width="0.3436%" height="15" fill="rgb(240,136,2)" fg:x="232" fg:w="1"/><text x="79.9751%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="453" width="0.3436%" height="15" fill="rgb(239,18,37)" fg:x="232" fg:w="1"/><text x="79.9751%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="437" width="0.3436%" height="15" fill="rgb(218,185,22)" fg:x="232" fg:w="1"/><text x="79.9751%" y="447.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="421" width="0.3436%" height="15" fill="rgb(225,218,4)" fg:x="232" fg:w="1"/><text x="79.9751%" y="431.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="405" width="0.3436%" height="15" fill="rgb(230,182,32)" fg:x="232" fg:w="1"/><text x="79.9751%" y="415.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="79.7251%" y="389" width="0.3436%" height="15" fill="rgb(242,56,43)" fg:x="232" fg:w="1"/><text x="79.9751%" y="399.50"></text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (124 samples, 42.61%)</title><rect x="37.8007%" y="789" width="42.6117%" height="15" fill="rgb(233,99,24)" fg:x="110" fg:w="124"/><text x="38.0507%" y="799.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_on..</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (124 samples, 42.61%)</title><rect x="37.8007%" y="773" width="42.6117%" height="15" fill="rgb(234,209,42)" fg:x="110" fg:w="124"/><text x="38.0507%" y="783.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_on..</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (124 samples, 42.61%)</title><rect x="37.8007%" y="757" width="42.6117%" height="15" fill="rgb(227,7,12)" fg:x="110" fg:w="124"/><text x="38.0507%" y="767.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (124 samples, 42.61%)</title><rect x="37.8007%" y="741" width="42.6117%" height="15" fill="rgb(245,203,43)" fg:x="110" fg:w="124"/><text x="38.0507%" y="751.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::sys::unix::thread::guard::current (2 samples, 0.69%)</title><rect x="79.7251%" y="725" width="0.6873%" height="15" fill="rgb(238,205,33)" fg:x="232" fg:w="2"/><text x="79.9751%" y="735.50"></text></g><g><title>__pthread_getattr_np (2 samples, 0.69%)</title><rect x="79.7251%" y="709" width="0.6873%" height="15" fill="rgb(231,56,7)" fg:x="232" fg:w="2"/><text x="79.9751%" y="719.50"></text></g><g><title>__GI___pthread_attr_setaffinity_np (1 samples, 0.34%)</title><rect x="80.0687%" y="693" width="0.3436%" height="15" fill="rgb(244,186,29)" fg:x="233" fg:w="1"/><text x="80.3187%" y="703.50"></text></g><g><title>__GI___pthread_attr_setaffinity_np (1 samples, 0.34%)</title><rect x="80.0687%" y="677" width="0.3436%" height="15" fill="rgb(234,111,31)" fg:x="233" fg:w="1"/><text x="80.3187%" y="687.50"></text></g><g><title>[libc.so.6] (1 samples, 0.34%)</title><rect x="80.0687%" y="661" width="0.3436%" height="15" fill="rgb(241,149,10)" fg:x="233" fg:w="1"/><text x="80.3187%" y="671.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::sys::unix::stack_overflow::Handler&gt; (6 samples, 2.06%)</title><rect x="80.4124%" y="789" width="2.0619%" height="15" fill="rgb(249,206,44)" fg:x="234" fg:w="6"/><text x="80.6624%" y="799.50">c..</text></g><g><title>&lt;std::sys::unix::stack_overflow::Handler as core::ops::drop::Drop&gt;::drop (6 samples, 2.06%)</title><rect x="80.4124%" y="773" width="2.0619%" height="15" fill="rgb(251,153,30)" fg:x="234" fg:w="6"/><text x="80.6624%" y="783.50">&lt;..</text></g><g><title>std::sys::unix::stack_overflow::imp::drop_handler (6 samples, 2.06%)</title><rect x="80.4124%" y="757" width="2.0619%" height="15" fill="rgb(239,152,38)" fg:x="234" fg:w="6"/><text x="80.6624%" y="767.50">s..</text></g><g><title>__GI___munmap (6 samples, 2.06%)</title><rect x="80.4124%" y="741" width="2.0619%" height="15" fill="rgb(249,139,47)" fg:x="234" fg:w="6"/><text x="80.6624%" y="751.50">_..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="80.4124%" y="725" width="2.0619%" height="15" fill="rgb(244,64,35)" fg:x="234" fg:w="6"/><text x="80.6624%" y="735.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="80.4124%" y="709" width="2.0619%" height="15" fill="rgb(216,46,15)" fg:x="234" fg:w="6"/><text x="80.6624%" y="719.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="80.4124%" y="693" width="2.0619%" height="15" fill="rgb(250,74,19)" fg:x="234" fg:w="6"/><text x="80.6624%" y="703.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="80.4124%" y="677" width="2.0619%" height="15" fill="rgb(249,42,33)" fg:x="234" fg:w="6"/><text x="80.6624%" y="687.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="80.4124%" y="661" width="2.0619%" height="15" fill="rgb(242,149,17)" fg:x="234" fg:w="6"/><text x="80.6624%" y="671.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="80.4124%" y="645" width="2.0619%" height="15" fill="rgb(244,29,21)" fg:x="234" fg:w="6"/><text x="80.6624%" y="655.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="80.4124%" y="629" width="2.0619%" height="15" fill="rgb(220,130,37)" fg:x="234" fg:w="6"/><text x="80.6624%" y="639.50">[..</text></g><g><title>__GI___sigaltstack (1 samples, 0.34%)</title><rect x="82.4742%" y="757" width="0.3436%" height="15" fill="rgb(211,67,2)" fg:x="240" fg:w="1"/><text x="82.7242%" y="767.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="82.4742%" y="741" width="0.3436%" height="15" fill="rgb(235,68,52)" fg:x="240" fg:w="1"/><text x="82.7242%" y="751.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="82.4742%" y="725" width="0.3436%" height="15" fill="rgb(246,142,3)" fg:x="240" fg:w="1"/><text x="82.7242%" y="735.50"></text></g><g><title>__GI___mmap64 (26 samples, 8.93%)</title><rect x="82.8179%" y="725" width="8.9347%" height="15" fill="rgb(241,25,7)" fg:x="241" fg:w="26"/><text x="83.0679%" y="735.50">__GI___mmap64</text></g><g><title>__GI___mmap64 (26 samples, 8.93%)</title><rect x="82.8179%" y="709" width="8.9347%" height="15" fill="rgb(242,119,39)" fg:x="241" fg:w="26"/><text x="83.0679%" y="719.50">__GI___mmap64</text></g><g><title>[unknown] (26 samples, 8.93%)</title><rect x="82.8179%" y="693" width="8.9347%" height="15" fill="rgb(241,98,45)" fg:x="241" fg:w="26"/><text x="83.0679%" y="703.50">[unknown]</text></g><g><title>[unknown] (26 samples, 8.93%)</title><rect x="82.8179%" y="677" width="8.9347%" height="15" fill="rgb(254,28,30)" fg:x="241" fg:w="26"/><text x="83.0679%" y="687.50">[unknown]</text></g><g><title>[unknown] (26 samples, 8.93%)</title><rect x="82.8179%" y="661" width="8.9347%" height="15" fill="rgb(241,142,54)" fg:x="241" fg:w="26"/><text x="83.0679%" y="671.50">[unknown]</text></g><g><title>[unknown] (26 samples, 8.93%)</title><rect x="82.8179%" y="645" width="8.9347%" height="15" fill="rgb(222,85,15)" fg:x="241" fg:w="26"/><text x="83.0679%" y="655.50">[unknown]</text></g><g><title>[unknown] (26 samples, 8.93%)</title><rect x="82.8179%" y="629" width="8.9347%" height="15" fill="rgb(210,85,47)" fg:x="241" fg:w="26"/><text x="83.0679%" y="639.50">[unknown]</text></g><g><title>[unknown] (21 samples, 7.22%)</title><rect x="84.5361%" y="613" width="7.2165%" height="15" fill="rgb(224,206,25)" fg:x="246" fg:w="21"/><text x="84.7861%" y="623.50">[unknown]</text></g><g><title>[unknown] (15 samples, 5.15%)</title><rect x="86.5979%" y="597" width="5.1546%" height="15" fill="rgb(243,201,19)" fg:x="252" fg:w="15"/><text x="86.8479%" y="607.50">[unkno..</text></g><g><title>[unknown] (9 samples, 3.09%)</title><rect x="88.6598%" y="581" width="3.0928%" height="15" fill="rgb(236,59,4)" fg:x="258" fg:w="9"/><text x="88.9098%" y="591.50">[un..</text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="90.3780%" y="565" width="1.3746%" height="15" fill="rgb(254,179,45)" fg:x="263" fg:w="4"/><text x="90.6280%" y="575.50"></text></g><g><title>[unknown] (4 samples, 1.37%)</title><rect x="90.3780%" y="549" width="1.3746%" height="15" fill="rgb(226,14,10)" fg:x="263" fg:w="4"/><text x="90.6280%" y="559.50"></text></g><g><title>__clone3 (173 samples, 59.45%)</title><rect x="35.3952%" y="837" width="59.4502%" height="15" fill="rgb(244,27,41)" fg:x="103" fg:w="173"/><text x="35.6452%" y="847.50">__clone3</text></g><g><title>start_thread (167 samples, 57.39%)</title><rect x="37.4570%" y="821" width="57.3883%" height="15" fill="rgb(235,35,32)" fg:x="109" fg:w="167"/><text x="37.7070%" y="831.50">start_thread</text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (166 samples, 57.04%)</title><rect x="37.8007%" y="805" width="57.0447%" height="15" fill="rgb(218,68,31)" fg:x="110" fg:w="166"/><text x="38.0507%" y="815.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>std::sys::unix::stack_overflow::Handler::new (36 samples, 12.37%)</title><rect x="82.4742%" y="789" width="12.3711%" height="15" fill="rgb(207,120,37)" fg:x="240" fg:w="36"/><text x="82.7242%" y="799.50">std::sys::unix::st..</text></g><g><title>std::sys::unix::stack_overflow::imp::make_handler (36 samples, 12.37%)</title><rect x="82.4742%" y="773" width="12.3711%" height="15" fill="rgb(227,98,0)" fg:x="240" fg:w="36"/><text x="82.7242%" y="783.50">std::sys::unix::st..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stack (35 samples, 12.03%)</title><rect x="82.8179%" y="757" width="12.0275%" height="15" fill="rgb(207,7,3)" fg:x="241" fg:w="35"/><text x="83.0679%" y="767.50">std::sys::unix::st..</text></g><g><title>std::sys::unix::stack_overflow::imp::get_stackp (35 samples, 12.03%)</title><rect x="82.8179%" y="741" width="12.0275%" height="15" fill="rgb(206,98,19)" fg:x="241" fg:w="35"/><text x="83.0679%" y="751.50">std::sys::unix::st..</text></g><g><title>__GI___mprotect (9 samples, 3.09%)</title><rect x="91.7526%" y="725" width="3.0928%" height="15" fill="rgb(217,5,26)" fg:x="267" fg:w="9"/><text x="92.0026%" y="735.50">__G..</text></g><g><title>[unknown] (9 samples, 3.09%)</title><rect x="91.7526%" y="709" width="3.0928%" height="15" fill="rgb(235,190,38)" fg:x="267" fg:w="9"/><text x="92.0026%" y="719.50">[un..</text></g><g><title>[unknown] (9 samples, 3.09%)</title><rect x="91.7526%" y="693" width="3.0928%" height="15" fill="rgb(247,86,24)" fg:x="267" fg:w="9"/><text x="92.0026%" y="703.50">[un..</text></g><g><title>[unknown] (9 samples, 3.09%)</title><rect x="91.7526%" y="677" width="3.0928%" height="15" fill="rgb(205,101,16)" fg:x="267" fg:w="9"/><text x="92.0026%" y="687.50">[un..</text></g><g><title>[unknown] (9 samples, 3.09%)</title><rect x="91.7526%" y="661" width="3.0928%" height="15" fill="rgb(246,168,33)" fg:x="267" fg:w="9"/><text x="92.0026%" y="671.50">[un..</text></g><g><title>[unknown] (9 samples, 3.09%)</title><rect x="91.7526%" y="645" width="3.0928%" height="15" fill="rgb(231,114,1)" fg:x="267" fg:w="9"/><text x="92.0026%" y="655.50">[un..</text></g><g><title>[unknown] (9 samples, 3.09%)</title><rect x="91.7526%" y="629" width="3.0928%" height="15" fill="rgb(207,184,53)" fg:x="267" fg:w="9"/><text x="92.0026%" y="639.50">[un..</text></g><g><title>[unknown] (9 samples, 3.09%)</title><rect x="91.7526%" y="613" width="3.0928%" height="15" fill="rgb(224,95,51)" fg:x="267" fg:w="9"/><text x="92.0026%" y="623.50">[un..</text></g><g><title>[unknown] (8 samples, 2.75%)</title><rect x="92.0962%" y="597" width="2.7491%" height="15" fill="rgb(212,188,45)" fg:x="268" fg:w="8"/><text x="92.3462%" y="607.50">[u..</text></g><g><title>[unknown] (7 samples, 2.41%)</title><rect x="92.4399%" y="581" width="2.4055%" height="15" fill="rgb(223,154,38)" fg:x="269" fg:w="7"/><text x="92.6899%" y="591.50">[u..</text></g><g><title>[unknown] (2 samples, 0.69%)</title><rect x="94.1581%" y="565" width="0.6873%" height="15" fill="rgb(251,22,52)" fg:x="274" fg:w="2"/><text x="94.4081%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="94.5017%" y="549" width="0.3436%" height="15" fill="rgb(229,209,22)" fg:x="275" fg:w="1"/><text x="94.7517%" y="559.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (1 samples, 0.34%)</title><rect x="94.8454%" y="549" width="0.3436%" height="15" fill="rgb(234,138,34)" fg:x="276" fg:w="1"/><text x="95.0954%" y="559.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (1 samples, 0.34%)</title><rect x="94.8454%" y="533" width="0.3436%" height="15" fill="rgb(212,95,11)" fg:x="276" fg:w="1"/><text x="95.0954%" y="543.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (1 samples, 0.34%)</title><rect x="94.8454%" y="517" width="0.3436%" height="15" fill="rgb(240,179,47)" fg:x="276" fg:w="1"/><text x="95.0954%" y="527.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.34%)</title><rect x="94.8454%" y="501" width="0.3436%" height="15" fill="rgb(240,163,11)" fg:x="276" fg:w="1"/><text x="95.0954%" y="511.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.34%)</title><rect x="94.8454%" y="485" width="0.3436%" height="15" fill="rgb(236,37,12)" fg:x="276" fg:w="1"/><text x="95.0954%" y="495.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.34%)</title><rect x="94.8454%" y="469" width="0.3436%" height="15" fill="rgb(232,164,16)" fg:x="276" fg:w="1"/><text x="95.0954%" y="479.50"></text></g><g><title>__rdl_alloc (1 samples, 0.34%)</title><rect x="94.8454%" y="453" width="0.3436%" height="15" fill="rgb(244,205,15)" fg:x="276" fg:w="1"/><text x="95.0954%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.34%)</title><rect x="94.8454%" y="437" width="0.3436%" height="15" fill="rgb(223,117,47)" fg:x="276" fg:w="1"/><text x="95.0954%" y="447.50"></text></g><g><title>__GI___libc_malloc (1 samples, 0.34%)</title><rect x="94.8454%" y="421" width="0.3436%" height="15" fill="rgb(244,107,35)" fg:x="276" fg:w="1"/><text x="95.0954%" y="431.50"></text></g><g><title>_int_malloc (1 samples, 0.34%)</title><rect x="94.8454%" y="405" width="0.3436%" height="15" fill="rgb(205,140,8)" fg:x="276" fg:w="1"/><text x="95.0954%" y="415.50"></text></g><g><title>checked_request2size (1 samples, 0.34%)</title><rect x="94.8454%" y="389" width="0.3436%" height="15" fill="rgb(228,84,46)" fg:x="276" fg:w="1"/><text x="95.0954%" y="399.50"></text></g><g><title>core::clone::Clone::clone (2 samples, 0.69%)</title><rect x="94.8454%" y="645" width="0.6873%" height="15" fill="rgb(254,188,9)" fg:x="276" fg:w="2"/><text x="95.0954%" y="655.50"></text></g><g><title>&lt;alloc::string::String as core::clone::Clone&gt;::clone (2 samples, 0.69%)</title><rect x="94.8454%" y="629" width="0.6873%" height="15" fill="rgb(206,112,54)" fg:x="276" fg:w="2"/><text x="95.0954%" y="639.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (2 samples, 0.69%)</title><rect x="94.8454%" y="613" width="0.6873%" height="15" fill="rgb(216,84,49)" fg:x="276" fg:w="2"/><text x="95.0954%" y="623.50"></text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (2 samples, 0.69%)</title><rect x="94.8454%" y="597" width="0.6873%" height="15" fill="rgb(214,194,35)" fg:x="276" fg:w="2"/><text x="95.0954%" y="607.50"></text></g><g><title>alloc::slice::hack::to_vec (2 samples, 0.69%)</title><rect x="94.8454%" y="581" width="0.6873%" height="15" fill="rgb(249,28,3)" fg:x="276" fg:w="2"/><text x="95.0954%" y="591.50"></text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (2 samples, 0.69%)</title><rect x="94.8454%" y="565" width="0.6873%" height="15" fill="rgb(222,56,52)" fg:x="276" fg:w="2"/><text x="95.0954%" y="575.50"></text></g><g><title>core::ptr::const_ptr::&lt;impl *const T&gt;::copy_to_nonoverlapping (1 samples, 0.34%)</title><rect x="95.1890%" y="549" width="0.3436%" height="15" fill="rgb(245,217,50)" fg:x="277" fg:w="1"/><text x="95.4390%" y="559.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.34%)</title><rect x="95.1890%" y="533" width="0.3436%" height="15" fill="rgb(213,201,24)" fg:x="277" fg:w="1"/><text x="95.4390%" y="543.50"></text></g><g><title>[libc.so.6] (1 samples, 0.34%)</title><rect x="95.1890%" y="517" width="0.3436%" height="15" fill="rgb(248,116,28)" fg:x="277" fg:w="1"/><text x="95.4390%" y="527.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::clone::Clone&gt;::clone (8 samples, 2.75%)</title><rect x="94.8454%" y="709" width="2.7491%" height="15" fill="rgb(219,72,43)" fg:x="276" fg:w="8"/><text x="95.0954%" y="719.50">&lt;a..</text></g><g><title>alloc::slice::&lt;impl [T]&gt;::to_vec_in (8 samples, 2.75%)</title><rect x="94.8454%" y="693" width="2.7491%" height="15" fill="rgb(209,138,14)" fg:x="276" fg:w="8"/><text x="95.0954%" y="703.50">al..</text></g><g><title>alloc::slice::hack::to_vec (8 samples, 2.75%)</title><rect x="94.8454%" y="677" width="2.7491%" height="15" fill="rgb(222,18,33)" fg:x="276" fg:w="8"/><text x="95.0954%" y="687.50">al..</text></g><g><title>&lt;T as alloc::slice::hack::ConvertVec&gt;::to_vec (8 samples, 2.75%)</title><rect x="94.8454%" y="661" width="2.7491%" height="15" fill="rgb(213,199,7)" fg:x="276" fg:w="8"/><text x="95.0954%" y="671.50">&lt;T..</text></g><g><title>core::mem::maybe_uninit::MaybeUninit&lt;T&gt;::write (6 samples, 2.06%)</title><rect x="95.5326%" y="645" width="2.0619%" height="15" fill="rgb(250,110,10)" fg:x="278" fg:w="6"/><text x="95.7826%" y="655.50">c..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="95.5326%" y="629" width="2.0619%" height="15" fill="rgb(248,123,6)" fg:x="278" fg:w="6"/><text x="95.7826%" y="639.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="95.5326%" y="613" width="2.0619%" height="15" fill="rgb(206,91,31)" fg:x="278" fg:w="6"/><text x="95.7826%" y="623.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="95.5326%" y="597" width="2.0619%" height="15" fill="rgb(211,154,13)" fg:x="278" fg:w="6"/><text x="95.7826%" y="607.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="95.5326%" y="581" width="2.0619%" height="15" fill="rgb(225,148,7)" fg:x="278" fg:w="6"/><text x="95.7826%" y="591.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="95.5326%" y="565" width="2.0619%" height="15" fill="rgb(220,160,43)" fg:x="278" fg:w="6"/><text x="95.7826%" y="575.50">[..</text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="95.8763%" y="549" width="1.7182%" height="15" fill="rgb(213,52,39)" fg:x="279" fg:w="5"/><text x="96.1263%" y="559.50"></text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="95.8763%" y="533" width="1.7182%" height="15" fill="rgb(243,137,7)" fg:x="279" fg:w="5"/><text x="96.1263%" y="543.50"></text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="95.8763%" y="517" width="1.7182%" height="15" fill="rgb(230,79,13)" fg:x="279" fg:w="5"/><text x="96.1263%" y="527.50"></text></g><g><title>[unknown] (5 samples, 1.72%)</title><rect x="95.8763%" y="501" width="1.7182%" height="15" fill="rgb(247,105,23)" fg:x="279" fg:w="5"/><text x="96.1263%" y="511.50"></text></g><g><title>lab4 (285 samples, 97.94%)</title><rect x="0.0000%" y="853" width="97.9381%" height="15" fill="rgb(223,179,41)" fg:x="0" fg:w="285"/><text x="0.2500%" y="863.50">lab4</text></g><g><title>_start (9 samples, 3.09%)</title><rect x="94.8454%" y="837" width="3.0928%" height="15" fill="rgb(218,9,34)" fg:x="276" fg:w="9"/><text x="95.0954%" y="847.50">_st..</text></g><g><title>__libc_start_main_impl (9 samples, 3.09%)</title><rect x="94.8454%" y="821" width="3.0928%" height="15" fill="rgb(222,106,8)" fg:x="276" fg:w="9"/><text x="95.0954%" y="831.50">__l..</text></g><g><title>__libc_start_call_main (9 samples, 3.09%)</title><rect x="94.8454%" y="805" width="3.0928%" height="15" fill="rgb(211,220,0)" fg:x="276" fg:w="9"/><text x="95.0954%" y="815.50">__l..</text></g><g><title>main (9 samples, 3.09%)</title><rect x="94.8454%" y="789" width="3.0928%" height="15" fill="rgb(229,52,16)" fg:x="276" fg:w="9"/><text x="95.0954%" y="799.50">main</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (9 samples, 3.09%)</title><rect x="94.8454%" y="773" width="3.0928%" height="15" fill="rgb(212,155,18)" fg:x="276" fg:w="9"/><text x="95.0954%" y="783.50">std..</text></g><g><title>core::ops::function::FnOnce::call_once (9 samples, 3.09%)</title><rect x="94.8454%" y="757" width="3.0928%" height="15" fill="rgb(242,21,14)" fg:x="276" fg:w="9"/><text x="95.0954%" y="767.50">cor..</text></g><g><title>lab4::main (9 samples, 3.09%)</title><rect x="94.8454%" y="741" width="3.0928%" height="15" fill="rgb(222,19,48)" fg:x="276" fg:w="9"/><text x="95.0954%" y="751.50">lab..</text></g><g><title>lab4::hackathon (9 samples, 3.09%)</title><rect x="94.8454%" y="725" width="3.0928%" height="15" fill="rgb(232,45,27)" fg:x="276" fg:w="9"/><text x="95.0954%" y="735.50">lab..</text></g><g><title>lab4::get_packages (1 samples, 0.34%)</title><rect x="97.5945%" y="709" width="0.3436%" height="15" fill="rgb(249,103,42)" fg:x="284" fg:w="1"/><text x="97.8445%" y="719.50"></text></g><g><title>core::iter::traits::iterator::Iterator::collect (1 samples, 0.34%)</title><rect x="97.5945%" y="693" width="0.3436%" height="15" fill="rgb(246,81,33)" fg:x="284" fg:w="1"/><text x="97.8445%" y="703.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as core::iter::traits::collect::FromIterator&lt;T&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="97.5945%" y="677" width="0.3436%" height="15" fill="rgb(252,33,42)" fg:x="284" fg:w="1"/><text x="97.8445%" y="687.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter::SpecFromIter&lt;T,I&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="97.5945%" y="661" width="0.3436%" height="15" fill="rgb(209,212,41)" fg:x="284" fg:w="1"/><text x="97.8445%" y="671.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T&gt; as alloc::vec::spec_from_iter_nested::SpecFromIterNested&lt;T,I&gt;&gt;::from_iter (1 samples, 0.34%)</title><rect x="97.5945%" y="645" width="0.3436%" height="15" fill="rgb(207,154,6)" fg:x="284" fg:w="1"/><text x="97.8445%" y="655.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as alloc::vec::spec_extend::SpecExtend&lt;T,I&gt;&gt;::spec_extend (1 samples, 0.34%)</title><rect x="97.5945%" y="629" width="0.3436%" height="15" fill="rgb(223,64,47)" fg:x="284" fg:w="1"/><text x="97.8445%" y="639.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::extend_desugared (1 samples, 0.34%)</title><rect x="97.5945%" y="613" width="0.3436%" height="15" fill="rgb(211,161,38)" fg:x="284" fg:w="1"/><text x="97.8445%" y="623.50"></text></g><g><title>core::ptr::write (1 samples, 0.34%)</title><rect x="97.5945%" y="597" width="0.3436%" height="15" fill="rgb(219,138,40)" fg:x="284" fg:w="1"/><text x="97.8445%" y="607.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="581" width="0.3436%" height="15" fill="rgb(241,228,46)" fg:x="284" fg:w="1"/><text x="97.8445%" y="591.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="565" width="0.3436%" height="15" fill="rgb(223,209,38)" fg:x="284" fg:w="1"/><text x="97.8445%" y="575.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="549" width="0.3436%" height="15" fill="rgb(236,164,45)" fg:x="284" fg:w="1"/><text x="97.8445%" y="559.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="533" width="0.3436%" height="15" fill="rgb(231,15,5)" fg:x="284" fg:w="1"/><text x="97.8445%" y="543.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="517" width="0.3436%" height="15" fill="rgb(252,35,15)" fg:x="284" fg:w="1"/><text x="97.8445%" y="527.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="501" width="0.3436%" height="15" fill="rgb(248,181,18)" fg:x="284" fg:w="1"/><text x="97.8445%" y="511.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="485" width="0.3436%" height="15" fill="rgb(233,39,42)" fg:x="284" fg:w="1"/><text x="97.8445%" y="495.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="469" width="0.3436%" height="15" fill="rgb(238,110,33)" fg:x="284" fg:w="1"/><text x="97.8445%" y="479.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="453" width="0.3436%" height="15" fill="rgb(233,195,10)" fg:x="284" fg:w="1"/><text x="97.8445%" y="463.50"></text></g><g><title>[unknown] (1 samples, 0.34%)</title><rect x="97.5945%" y="437" width="0.3436%" height="15" fill="rgb(254,105,3)" fg:x="284" fg:w="1"/><text x="97.8445%" y="447.50"></text></g><g><title>all (291 samples, 100%)</title><rect x="0.0000%" y="869" width="100.0000%" height="15" fill="rgb(221,225,9)" fg:x="0" fg:w="291"/><text x="0.2500%" y="879.50"></text></g><g><title>perf-exec (6 samples, 2.06%)</title><rect x="97.9381%" y="853" width="2.0619%" height="15" fill="rgb(224,227,45)" fg:x="285" fg:w="6"/><text x="98.1881%" y="863.50">p..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="837" width="2.0619%" height="15" fill="rgb(229,198,43)" fg:x="285" fg:w="6"/><text x="98.1881%" y="847.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="821" width="2.0619%" height="15" fill="rgb(206,209,35)" fg:x="285" fg:w="6"/><text x="98.1881%" y="831.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="805" width="2.0619%" height="15" fill="rgb(245,195,53)" fg:x="285" fg:w="6"/><text x="98.1881%" y="815.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="789" width="2.0619%" height="15" fill="rgb(240,92,26)" fg:x="285" fg:w="6"/><text x="98.1881%" y="799.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="773" width="2.0619%" height="15" fill="rgb(207,40,23)" fg:x="285" fg:w="6"/><text x="98.1881%" y="783.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="757" width="2.0619%" height="15" fill="rgb(223,111,35)" fg:x="285" fg:w="6"/><text x="98.1881%" y="767.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="741" width="2.0619%" height="15" fill="rgb(229,147,28)" fg:x="285" fg:w="6"/><text x="98.1881%" y="751.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="725" width="2.0619%" height="15" fill="rgb(211,29,28)" fg:x="285" fg:w="6"/><text x="98.1881%" y="735.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="709" width="2.0619%" height="15" fill="rgb(228,72,33)" fg:x="285" fg:w="6"/><text x="98.1881%" y="719.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="693" width="2.0619%" height="15" fill="rgb(205,214,31)" fg:x="285" fg:w="6"/><text x="98.1881%" y="703.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="677" width="2.0619%" height="15" fill="rgb(224,111,15)" fg:x="285" fg:w="6"/><text x="98.1881%" y="687.50">[..</text></g><g><title>[unknown] (6 samples, 2.06%)</title><rect x="97.9381%" y="661" width="2.0619%" height="15" fill="rgb(253,21,26)" fg:x="285" fg:w="6"/><text x="98.1881%" y="671.50">[..</text></g></svg></svg>